{"version":3,"sources":["pages/Users/NewUser/styles.module.css","pages/Users/EditUser/styles.module.css","pages/Lots/NewLot/styles.module.css","pages/Lots/EditLot/styles.module.css","pages/Users/RedefinePass/styles.module.css","pages/Orders/ListOrders/styles.module.css","pages/Permissions/styles.module.css","pages/Lots/ListLots/styles.module.css","pages/Orders/DispatchOrder/styles.module.css","pages/Labs/NewLab/styles.module.css","pages/Labs/EditLab/styles.module.css","pages/Courses/NewCourse/styles.module.css","pages/Courses/EditCourse/styles.module.css","images/logo.png","services/api.js","pages/dashboard/MainListItems.js","pages/Home/index.js","components/ErrorMessageDialog/index.js","components/SnackAlert/index.js","pages/Items/EditItem/index.js","utils/formatDate.js","pages/Lots/ListLots/index.js","pages/Items/NewItem/index.js","pages/Items/index.js","pages/Lots/NewLot/index.js","pages/Lots/EditLot/index.js","pages/Orders/MyOrders/index.js","pages/Users/NewUser/index.js","pages/Users/EditUser/index.js","pages/Users/RedefinePass/index.js","pages/Users/index.js","pages/Orders/DispatchOrder/index.js","pages/Orders/OrderDetail/index.js","utils/materialTableUtils.js","pages/Orders/NewOrder/index.js","pages/Orders/ListOrders/index.js","pages/Roles/EditRole/index.js","pages/Roles/NewRole/index.js","pages/Roles/index.js","pages/Menu/EditMenu/index.js","pages/Menu/NewMenu/index.js","pages/Menu/index.js","pages/Permissions/index.js","pages/Labs/ListLabs/index.js","pages/Labs/NewLab/index.js","pages/Labs/EditLab/index.js","pages/Courses/ListCourses/index.js","pages/Courses/NewCourse/index.js","pages/Courses/EditCourse/index.js","utils/routePaths.js","routes.js","pages/dashboard/Dashboard.js","pages/Login/index.js","App.js","index.js"],"names":["module","exports","api","axios","create","baseURL","withCredentials","ListItemLink","props","icon","primary","to","renderLink","React","useMemo","forwardRef","itemProps","ref","ListItem","button","component","ListItemIcon","ListItemText","MainListItems","logout","useState","menuItems","setMenuItems","roleID","sessionStorage","getItem","useEffect","get","then","response","data","menus","map","item","name","path","key","id","onClick","Home","Container","Typography","ErrorMessageDialog","toggle","errors","handleClose","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","error","index","style","color","Alert","elevation","variant","SnackAlert","openSnack","severity","snackMessage","Snackbar","autoHideDuration","useStyles","makeStyles","theme","root","margin","spacing","width","buttons","EditItem","history","useHistory","useParams","classes","brand","unit","formula","molecular_weight","concentration","setItem","setOpenSnack","setSeverity","setSnackMessage","setError","errorMessages","setErrorMessages","catch","length","handleInputChange","event","target","value","Paper","className","onSubmit","preventDefault","returnFlag","concat","qtd","put","TextField","label","onChange","required","select","MenuItem","Button","type","marginBottom","goBack","getFormattedDate","date","newDate","Date","month","getUTCMonth","getUTCDate","getUTCFullYear","Lots","itemId","lots","setLots","console","log","hasOwnProperty","toUpperCase","styles","addButton","startIcon","push","TableContainer","Table","size","TableHead","TableRow","TableCell","TableBody","lot","description","expiration","formHeader","paddingTop","NewItem","setName","setBrand","setUnit","setFormula","setMolecularWeight","setConcentration","lotDescription","setLotDescription","setExpiration","setQtd","handleSubmit","post","un","utils","DateFnsUtils","locale","ptBRLocale","views","format","disableToolbar","autoOk","inputProps","min","step","Items","items","setItems","selectedItem","setSelectedItem","currentPage","setCurrentPage","totalItems","setTotalItems","previousPage","setPreviousPage","nextPage","setNextPage","feedbackMessage","setFeedbackMessage","rowsPerPage","setRowsPerPage","openDialog","setOpenDialog","fetchItems","current_page","total","prev_page_url","next_page_url","per_page","handleDialogClose","forEach","Number","calculateQtd","TableFooter","TablePagination","rowsPerPageOptions","colSpan","page","count","onChangePage","url","labelDisplayedRows","from","DialogActions","delete","NewLot","setDescription","URLSearchParams","useLocation","search","Box","mb","formRow","descriptionField","mt","buttonsRow","EditLot","initialLotState","item_id","lotId","setLot","handleChange","MyOrders","orders","setOrders","currentUser","order","hover","due_date","dispatched","NewUser","roles","setRoles","username","setUsername","selectedRole","setSelectedRole","email","setEmail","password","setPassword","passwordConfirmation","setPasswordConfirmation","passwordCheck","setPasswordCheck","dialogMessage","setDialogMessage","status","role_id","form","autoComplete","helperText","role","maxWidth","fullWidth","EditUser","RedefinePass","user","setUser","passwordError","setPasswordError","InputProps","readOnly","newPassword","Users","users","setUsers","fetchData","_isMounted","marginRight","marginLeft","Row","dataset","qtySubtracted","pivot","rowSpan","max","DispatchOrder","setOrder","qtyPerLot","setQtyPerLot","orderId","changedLot","qtyPerLotsCopy","findIndex","created_at","lotsInformation","OrderDetail","due_time","lab","course","grant","setGrant","currentRoleId","display","justifyContent","marginTop","tableIcons","Add","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","localization","body","emptyDataSourceMessage","addTooltip","deleteTooltip","editTooltip","filterRow","filterPlaceHolder","filterTooltip","editRow","deleteText","cancelTooltip","saveTooltip","grouping","placeholder","groupedBy","header","actions","pagination","labelRowsSelect","labelRowsPerPage","firstAriaLabel","firstTooltip","previousAriaLabel","previousTooltip","nextAriaLabel","nextTooltip","lastAriaLabel","lastTooltip","toolbar","addRemoveColumns","nRowsSelected","showColumnsTitle","showColumnsAriaLabel","exportTitle","exportAriaLabel","exportName","searchTooltip","searchPlaceholder","continueButton","goBackButton","buttonContainer","inputField","selectFields","SelectQuantities","selectedItems","labs","setLabs","courses","setCourses","selectedLab","setSelectedLab","selectedCourse","setSelectedCourse","dueDate","setDueDate","dueTime","setDueTime","handleCloseDialog","handleSave","lab_id","course_id","errorFlag","handleKeyPress","comment","join","disablePast","hours","i","j","hour","getHours","changedItem","newItems","handleChangeQuantity","onKeyPress","NewOrder","match","setSelectedItems","useRouteMatch","exact","RouterLink","columns","title","field","render","rowData","searchable","icons","options","selection","sorting","draggable","onSelectionChange","rows","ListOrders","filter","setFilter","getDate","getMonth","getFullYear","EditRole","setRole","NewRole","Roles","selectedRoles","setSelectedRoles","table","minWidth","fetchRoles","aria-label","scope","EditMenu","menu","setMenu","paths","NewMenu","setPath","Menu","selectedMenu","setSelectedMenu","fetchMenus","PermissionsList","setMenus","selectedMenus","setSelectedMenus","Grid","menusGrid","List","dense","labelId","check","htmlFor","Checkbox","checked","selectedMenuIndex","menuIndex","newSelectedMenus","splice","Permissions","dialogText","setDialogText","continuing","setContinuing","container","ml","ListLabs","fetchLabs","NewLab","setComment","p","mr","formField","EditLab","labId","setLab","ListCourses","fetchCourses","NewCourse","EditCourse","courseId","setCourse","Routes","paddingRight","toolbarIcon","alignItems","padding","mixins","appBar","zIndex","drawer","transition","transitions","easing","sharp","duration","leavingScreen","appBarShift","enteringScreen","menuButton","menuButtonHidden","flexGrow","drawerPaper","position","whiteSpace","drawerPaperClose","overflowX","breakpoints","up","appBarSpacer","content","height","overflow","paddingBottom","paper","flexDirection","fixedHeight","Dashboard","setOpen","CssBaseline","AppBar","clsx","Toolbar","IconButton","edge","noWrap","src","logo","alt","Drawer","Divider","Login","login","errorMessage","setErrorMessage","App","loggedIn","setLoggedIn","clear","responseData","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.6390b028.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"styles_form__3gdMx\",\"form-row\":\"styles_form-row__1m-4K\",\"input-field\":\"styles_input-field__1ULKc\",\"buttons-row\":\"styles_buttons-row__3dVug\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"styles_form__3-QSP\",\"form-row\":\"styles_form-row__2Yh6E\",\"input-field\":\"styles_input-field__dnrVN\",\"buttons-row\":\"styles_buttons-row__1bMor\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formRow\":\"styles_formRow__9sq3u\",\"descriptionField\":\"styles_descriptionField__2uve3\",\"buttonsRow\":\"styles_buttonsRow__2YClg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formRow\":\"styles_formRow__12_p2\",\"descriptionField\":\"styles_descriptionField__2Hqsf\",\"buttonsRow\":\"styles_buttonsRow__17JaZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"styles_form__3HFgh\",\"button-row\":\"styles_button-row__3OCU4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter-row\":\"styles_filter-row__1vfZQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"styles_select__4OePP\",\"menusGrid\":\"styles_menusGrid__1MtKy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addButton\":\"styles_addButton__E79GZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button-row\":\"styles_button-row__1X6OW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formField\":\"styles_formField__JCtAN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formField\":\"styles_formField__o_G5x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formField\":\"styles_formField__1WnrK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formField\":\"styles_formField__269ST\"};","module.exports = __webpack_public_path__ + \"static/media/logo.3220de64.png\";","import axios from 'axios'\n\nconst api = axios.create({\n    baseURL: 'http://localhost:8000/api/',\n    withCredentials: true\n})\n\nexport default api","import React, {useState, useEffect} from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport {Switch, Route, Link as RouterLink} from 'react-router-dom'\nimport HomeIcon from '@material-ui/icons/Home'\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport api from '../../services/api'\n\nconst ListItemLink = (props) => {\n    const {icon, primary, to} = props;\n\n    const renderLink = React.useMemo(\n        () => React.forwardRef((itemProps, ref) => <RouterLink to={to} ref={ref} {...itemProps} />),\n        [to],\n    );\n\n    return (\n        <li>\n            <ListItem button component={renderLink}>\n                {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\n                <ListItemText primary={primary}/>\n            </ListItem>\n        </li>\n    );\n}\n\nconst MainListItems = ({logout}) => {\n\n    const [menuItems, setMenuItems] = useState([])\n    const roleID = sessionStorage.getItem('roleId')\n\n    useEffect(() => {\n        if (!roleID) {\n            return\n        }\n        api.get(`/roles/${roleID}/menus`)\n            .then((response) => {\n                setMenuItems(response.data.menus)\n            })\n    }, [roleID])\n\n    return (\n        <div>\n            <ListItemLink primary=\"Início\" to=\"/\" icon={<HomeIcon/>}/>\n            {menuItems.map((item) => (\n                <ListItemLink primary={item.name} to={item.path} key={item.id} icon={<ChevronRightIcon/>}/>\n            ))}\n            <ListItem button onClick={logout}>\n                <ListItemIcon>\n                    <ExitToAppIcon />\n                </ListItemIcon>\n                <ListItemText>Sair</ListItemText>\n            </ListItem>\n            <Switch>\n                <Route path=\"/\" component={this}/>\n            </Switch>\n        </div>\n    )\n}\n\nexport default MainListItems","import React from 'react'\nimport Container from \"@material-ui/core/Container\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst Home = () => {\n    return (\n        <Container>\n            <h1>Olá!</h1>\n            <Typography>Seja bem vindo! Acesse uma das opções ao lado para começar.</Typography>\n        </Container>\n    )\n}\n\nexport default Home","import React from 'react'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\n\nconst ErrorMessageDialog = ({ toggle, errors, handleClose }) => {\n    return (\n        <Dialog open={toggle} onClose={handleClose}>\n            <DialogTitle>Erro!</DialogTitle>\n            <DialogContent>\n                <DialogContentText>Foram encontrados os seguintes erros:</DialogContentText>\n                {errors.map((error, index) => (\n                    <DialogContentText key={index} style={{ color: 'red' }}>\n                        {error}\n                    </DialogContentText>\n                ))}\n            </DialogContent>\n        </Dialog>\n    )\n}\n\nexport default ErrorMessageDialog\n","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert from '@material-ui/lab/Alert'\n\nconst Alert = (props) => {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst SnackAlert = ({ openSnack, onClose, severity, snackMessage }) => {\n\n    return (\n        <Snackbar open={openSnack} autoHideDuration={2000} onClose={onClose}>\n            <Alert severity={severity}>{snackMessage}</Alert>\n        </Snackbar>\n    )\n}\n\nexport default SnackAlert","import React, { useEffect, useState } from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Container from \"@material-ui/core/Container\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Paper from \"@material-ui/core/Paper\";\nimport ErrorMessageDialog from '../../../components/ErrorMessageDialog'\nimport SnackAlert from '../../../components/SnackAlert'\nimport api from '../../../services/api'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        \"& > *\": {\n            margin: theme.spacing(1),\n            width: \"40ch\",\n        },\n    },\n    buttons: {\n        \"& > *\": {\n            margin: 5,\n        },\n        width: \"100%\",\n    },\n}));\n\nconst EditItem = () => {\n\n    const history = useHistory()\n    const { id } = useParams()\n    const classes = useStyles()\n    const [item, setItem] = useState({\n        id: 0,\n        name: '',\n        brand: '',\n        unit: '',\n        formula: '',\n        molecular_weight: '',\n        concentration: ''\n    })\n    const units = [\"ML\", \"L\", \"UN\", \"G\", \"KG\", \"M\", \"CM\", \"MOL\"];\n    const [openSnack, setOpenSnack] = useState(false)\n    const [severity, setSeverity] = useState('')\n    const [snackMessage, setSnackMessage] = useState('')\n    const [error, setError] = useState(false)\n    const [errorMessages, setErrorMessages] = useState([])\n\n    useEffect(() => {\n        api.get(`items/${id}`)\n            .then(response => {\n                setItem(response.data)\n            })\n            .catch(error => {\n                setSnackMessage(error.response.data.error)\n                setSeverity('error')\n                setOpenSnack(true)\n            })\n    }, [id])\n    \n    useEffect(() => {\n        if (errorMessages.length > 0) {\n            setError(true)\n        }\n    }, [errorMessages])\n\n    const handleSubmit = event => {\n        event.preventDefault()\n        let returnFlag = false\n        if (!item.name) {\n            setErrorMessages(errorMessages => errorMessages.concat(\"O campo nome deve estar preenchido.\"));\n            returnFlag = true\n        }\n        if (item.qtd < 1) {\n            setErrorMessages(errorMessages => errorMessages.concat(\"O campo quantidade deve ser maior que zero.\"));\n            returnFlag = true\n        }\n        if (!item.unit) {\n            setErrorMessages(errorMessages => errorMessages.concat(\"Selecione uma unidade.\"));\n            returnFlag = true\n        }\n        if (returnFlag) {\n            return\n        }\n\n        api.put(`items/${item.id}`, item)\n            .then(response => {\n                setSeverity('success')\n                setSnackMessage(`O item \"${response.data.name}\" foi salvo com sucesso!`)\n                setOpenSnack(true)\n            })\n            .catch(error => {\n                setSeverity('error')\n                setSnackMessage('Ocorreu um erro em sua solicitação.')\n                setOpenSnack(true)\n            })\n    }\n\n    const handleCloseDialog = () => {\n        setError(false)\n        setErrorMessages([])\n    }\n\n    const handleCloseSnackBar = () => {\n        if (severity === 'success') {\n            history.goBack()\n        }\n        setOpenSnack(false)\n    }\n\n    const handleInputChange = event => {\n        const {name, value} = event.target\n        setItem({\n            ...item,\n            [name]: value\n        })\n    }\n\n    return (\n        <Container>\n            <h1>Editar item</h1>\n            <Paper>\n                <form className={classes.root} onSubmit={handleSubmit}>\n                    <TextField\n                        label=\"Nome\"\n                        name=\"name\"\n                        value={item.name}\n                        onChange={handleInputChange}\n                        required\n                    />\n                    <TextField\n                        label=\"Marca\"\n                        name=\"brand\"\n                        value={item.brand}\n                        onChange={handleInputChange}\n                    />\n                    <TextField\n                        name=\"unit\"\n                        select\n                        label=\"Unidade\"\n                        value={item.unit}\n                        onChange={handleInputChange}\n                        required\n                    >\n                        {units.map((unit) => (\n                            <MenuItem key={unit} value={unit}>\n                                {unit}\n                            </MenuItem>\n                        ))}\n                    </TextField>\n                    <TextField\n                        label=\"Fórmula Química\"\n                        name=\"formula\"\n                        value={item.formula}\n                        onChange={handleInputChange}\n                    />\n                    <TextField\n                        label=\"Peso molecular\"\n                        name=\"molecular_weight\"\n                        value={item.molecular_weight}\n                        onChange={handleInputChange}\n                    />\n                    <TextField\n                        label=\"Concentração\"\n                        name=\"concentration\"\n                        value={item.concentration}\n                        onChange={handleInputChange}\n                    />\n                    <div className={classes.buttons}>\n                        <Button\n                            type=\"submit\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            style={{ marginBottom: 20 }}\n                        >\n                            Salvar\n                        </Button>\n                        <Button\n                            onClick={() => {\n                                history.goBack();\n                            }}\n                            variant=\"contained\"\n                            style={{ marginBottom: 20 }}\n                        >\n                            Voltar\n                        </Button>\n                    </div>\n                </form>\n            </Paper>\n            <ErrorMessageDialog toggle={error} handleClose={handleCloseDialog} errors={errorMessages} />\n            <SnackAlert openSnack={openSnack} onClose={handleCloseSnackBar} severity={severity} snackMessage={snackMessage} />\n        </Container>\n    );\n}\n\nexport default EditItem","export const getFormattedDate = (date) => {\n    const newDate = new Date(date)\n    let month = 0\n    if ((newDate.getUTCMonth() + 1) < 10) {\n        month = `0` + (newDate.getUTCMonth() + 1)\n    } else {\n        month = newDate.getUTCMonth() + 1\n    }\n    return (`${newDate.getUTCDate()}/${month}/${newDate.getUTCFullYear()}`)\n}","import React, {useEffect, useState} from 'react'\nimport {useParams, useHistory} from 'react-router-dom'\nimport api from \"../../../services/api\";\nimport Container from \"@material-ui/core/Container\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport Table from \"@material-ui/core/Table\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport {getFormattedDate} from \"../../../utils/formatDate\";\nimport Button from \"@material-ui/core/Button\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport styles from './styles.module.css'\n\nconst Lots = () => {\n    const {itemId} = useParams()\n    const [item, setItem] = useState({})\n    const [lots, setLots] = useState([])\n    const history = useHistory()\n\n    useEffect(() => {\n        api.get(`/items/${itemId}`)\n            .then(response => {\n                setItem(response.data)\n            })\n            .catch(error => {\n                console.log(error.response.data)\n            })\n\n        api.get(`/lots/item/${itemId}`)\n            .then(response => {\n                setLots(response.data)\n            })\n            .catch(error => {\n                console.log(error.response.data)\n            })\n    }, [itemId])\n\n    return (\n        <Container>\n            <h1>Lotes do item: {item.hasOwnProperty('name') ? item.name.toUpperCase() : null}</h1>\n            <div className={styles.addButton}>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    startIcon={<AddCircleIcon />}\n                    onClick={() => history.push(`/lots/new?item=${itemId}`)}\n                >Novo lote</Button>\n            </div>\n            <TableContainer component={Paper}>\n                <Table size=\"small\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Descrição</TableCell>\n                            <TableCell>Validade</TableCell>\n                            <TableCell>Quantidade</TableCell>\n                            <TableCell>Opções</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {lots.map(lot => (\n                            <TableRow key={lot.id}>\n                                <TableCell>{lot.description}</TableCell>\n                                <TableCell>{getFormattedDate(lot.expiration)}</TableCell>\n                                <TableCell>{lot.qtd}</TableCell>\n                                <TableCell>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        size=\"small\"\n                                        onClick={() => history.push(`/lots/edit/${lot.id}`)}\n                                    >Editar</Button>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </Container>\n    )\n}\n\nexport default Lots","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n} from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport ptBRLocale from \"date-fns/locale/pt-BR\";\nimport ErrorMessageDialog from \"../../../components/ErrorMessageDialog\";\nimport SnackAlert from \"../../../components/SnackAlert\";\nimport api from \"../../../services/api\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        \"& > *\": {\n            margin: theme.spacing(1),\n        },\n    },\n    formHeader: {\n        paddingTop: 10,\n    },\n    buttons: {\n        \"& > *\": {\n            margin: 5,\n        },\n        width: \"100%\",\n    },\n}));\n\nconst NewItem = () => {\n    const history = useHistory();\n    const classes = useStyles();\n\n    // Item fields\n    const [name, setName] = useState(\"\");\n    const [brand, setBrand] = useState(\"\");\n    const [unit, setUnit] = useState(\"\");\n    const [formula, setFormula] = useState(\"\");\n    const [molecular_weight, setMolecularWeight] = useState(\"\");\n    const [concentration, setConcentration] = useState(\"\");\n\n    // Lot fields\n    const [lotDescription, setLotDescription] = useState(\"\");\n    const [expiration, setExpiration] = useState(null);\n    const [qtd, setQtd] = useState(1);\n\n    // Feedback\n    const [error, setError] = useState(false);\n    const [errorMessages, setErrorMessages] = useState([]);\n    const [openSnack, setOpenSnack] = useState(false);\n    const [severity, setSeverity] = useState(\"\");\n    const [snackMessage, setSnackMessage] = useState(\"\");\n\n    const unities = [\"ML\", \"L\", \"UN\", \"G\", \"KG\", \"M\", \"CM\", \"MOL\"];\n\n    useEffect(() => {\n        if (errorMessages.length > 0) {\n            setError(true);\n        }\n    }, [errorMessages]);\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const data = {\n            name,\n            brand,\n            unit,\n            formula,\n            molecular_weight,\n            concentration,\n            lot: {\n                description: lotDescription,\n                expiration,\n                qtd,\n            }\n        };\n\n        let returnFlag = false;\n        if (!data.name) {\n            setErrorMessages((errorMessages) =>\n                errorMessages.concat(\"O campo nome deve estar preenchido.\")\n            );\n            returnFlag = true;\n        }\n        if (!data.brand) {\n            setErrorMessages((errorMessages) =>\n                errorMessages.concat(\"O campo marca deve estar preenchido.\")\n            );\n            returnFlag = true;\n        }\n        if (data.lot.qtd <= 0) {\n            setErrorMessages((errorMessages) =>\n                errorMessages.concat(\n                    \"O campo quantidade deve ser maior que zero.\"\n                )\n            );\n            returnFlag = true;\n        }\n        if (!data.unit) {\n            setErrorMessages((errorMessages) =>\n                errorMessages.concat(\"Selecione uma unidade.\")\n            );\n            returnFlag = true;\n        }\n        if (returnFlag) {\n            return;\n        }\n\n        api.post(\"/items\", data)\n            .then((response) => {\n                setSeverity(\"success\");\n                setSnackMessage(\n                    `O item \"${response.data.name}\" foi criado com sucesso!`\n                );\n                setOpenSnack(true);\n            })\n            .catch((error) => {\n                setSeverity(\"error\");\n                setSnackMessage(\"Ocorreu um erro em sua solicitação.\");\n                setOpenSnack(true);\n            });\n    };\n\n    const handleCloseDialog = () => {\n        setError(false);\n        setErrorMessages([]);\n    };\n\n    const handleCloseSnackBar = () => {\n        if (severity === \"success\") {\n            history.goBack();\n        }\n        setOpenSnack(false);\n    };\n\n    return (\n        <Container>\n            <h1>Novo item</h1>\n            <form onSubmit={handleSubmit}>\n                <Paper className={classes.root}>\n                    <h3 className={classes.formHeader}>Dados do item</h3>\n                    <TextField\n                        label=\"Nome\"\n                        value={name}\n                        onChange={(event) => setName(event.target.value)}\n                        required\n                    />\n                    <TextField\n                        label=\"Marca\"\n                        value={brand}\n                        onChange={(event) => setBrand(event.target.value)}\n                        required\n                    />\n                    <TextField\n                        id=\"unit-label\"\n                        select\n                        label=\"Unidade\"\n                        value={unit}\n                        onChange={(event) => setUnit(event.target.value)}\n                        style={{ width: \"20ch\" }}\n                        required\n                    >\n                        {unities.map((un) => (\n                            <MenuItem key={un} value={un}>\n                                {un}\n                            </MenuItem>\n                        ))}\n                    </TextField>\n                    <TextField\n                        label=\"Fórmula Química\"\n                        value={formula}\n                        onChange={(event) => setFormula(event.target.value)}\n                    />\n                    <TextField\n                        label=\"Peso Molecular\"\n                        value={molecular_weight}\n                        onChange={(event) => setMolecularWeight(event.target.value)}\n                    />\n                    <TextField\n                        label=\"Concentração\"\n                        value={concentration}\n                        onChange={(event) => setConcentration(event.target.value)}\n                    />\n                    <h3 className={classes.formHeader}>Dados do lote</h3>\n                    <TextField\n                        label=\"Descrição do lote\"\n                        value={lotDescription}\n                        onChange={(event) =>\n                            setLotDescription(event.target.value)\n                        }\n                    />\n                    <MuiPickersUtilsProvider utils={DateFnsUtils} locale={ptBRLocale}>\n                        <KeyboardDatePicker\n                            label=\"Validade\"\n                            views={['month', 'year']}\n                            format=\"MM/yyyy\"\n                            onChange={(date) => setExpiration(date)}\n                            value={expiration}\n                            variant=\"inline\"\n                            disableToolbar\n                            autoOk\n                        />\n                    </MuiPickersUtilsProvider>\n                    <TextField\n                        label=\"Quantidade\"\n                        value={qtd}\n                        onChange={(event) => setQtd(event.target.value)}\n                        type=\"number\"\n                        inputProps={{ min: 1, step: 0.1 }}\n                        required\n                    />\n                    <div className={classes.buttons}>\n                        <Button\n                            onClick={(event) => handleSubmit(event)}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            style={{ marginBottom: 20 }}\n                        >\n                            Salvar\n                        </Button>\n                        <Button\n                            onClick={() => {\n                                history.goBack();\n                            }}\n                            variant=\"contained\"\n                            style={{ marginBottom: 20 }}\n                        >\n                            Voltar\n                        </Button>\n                    </div>\n                </Paper>\n            </form>\n            <ErrorMessageDialog\n                toggle={error}\n                handleClose={handleCloseDialog}\n                errors={errorMessages}\n            />\n            <SnackAlert\n                openSnack={openSnack}\n                onClose={handleCloseSnackBar}\n                severity={severity}\n                snackMessage={snackMessage}\n            />\n        </Container>\n    );\n};\n\nexport default NewItem;\n","import React, {useState, useEffect} from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport Container from \"@material-ui/core/Container\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableFooter from \"@material-ui/core/TableFooter\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport Paper from \"@material-ui/core/Paper\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport Button from \"@material-ui/core/Button\";\nimport SnackAlert from \"../../components/SnackAlert\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport api from \"../../services/api\";\n\nconst Items = () => {\n    const [items, setItems] = useState([]);\n    const [selectedItem, setSelectedItem] = useState(0);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [totalItems, setTotalItems] = useState(0);\n    const [previousPage, setPreviousPage] = useState(\"\");\n    const [nextPage, setNextPage] = useState(\"\");\n    const [feedbackMessage, setFeedbackMessage] = useState(\"\");\n    const [rowsPerPage, setRowsPerPage] = useState(0);\n    const [openSnack, setOpenSnack] = useState(false);\n    const [openDialog, setOpenDialog] = useState(false);\n    const [severity, setSeverity] = useState(\"\");\n    const history = useHistory();\n\n    useEffect(() => {\n        fetchItems();\n    }, []);\n\n    const fetchItems = () => {\n        api.get(\"/items\")\n            .then((response) => {\n                setItems(response.data.data);\n                setCurrentPage(response.data.current_page);\n                setTotalItems(response.data.total);\n                setPreviousPage(response.data.prev_page_url);\n                setNextPage(response.data.next_page_url);\n                setRowsPerPage(response.data.per_page);\n            })\n            .catch((error) => {\n                setFeedbackMessage(\"Não foi possível acessar os itens.\");\n                setSeverity(\"error\");\n                setOpenSnack(true);\n            });\n    };\n\n    const handleChangePage = (event, page) => {\n        let url;\n        if (page > currentPage - 1) {\n            url = nextPage;\n        } else {\n            url = previousPage;\n        }\n        api.get(url)\n            .then((response) => {\n                setItems(response.data.data);\n                setCurrentPage(response.data.current_page);\n                setPreviousPage(response.data.prev_page_url);\n                setNextPage(response.data.next_page_url);\n            })\n            .catch((error) => {\n                setFeedbackMessage(\"Não foi possível acessar os itens.\");\n                setSeverity(\"error\");\n                setOpenSnack(true);\n            });\n    };\n\n    const handleSnackClose = () => {\n        setOpenSnack(false);\n    };\n\n    const handleDialogClose = () => {\n        setOpenDialog(false);\n    };\n\n    const handleDeleteButton = (id) => {\n        api.delete(`items/${id}`)\n            .then((response) => {\n                fetchItems();\n                setOpenDialog(false);\n                setFeedbackMessage(\"O item foi excluído.\");\n                setSeverity(\"success\");\n                setOpenSnack(true);\n            })\n            .catch((error) => {\n                setFeedbackMessage(\"Não foi possível excluir o item.\");\n                setSeverity(\"error\");\n                setOpenSnack(true);\n            });\n    };\n\n    const calculateQtd = (lots) => {\n        if (lots.length < 1) {\n            return 0;\n        }\n        let qtd = 0;\n        lots.forEach((lot) => {\n            qtd += Number(lot.qtd);\n        })\n        return qtd;\n    };\n\n    return (\n        <Container>\n            <h1>Itens</h1>\n            <Button\n                onClick={() => {\n                    history.push(\"/items/new\");\n                }}\n                variant=\"contained\"\n                color=\"primary\"\n                startIcon={<AddCircleIcon/>}\n                style={{marginBottom: 20}}\n            >\n                Novo item\n            </Button>\n            <TableContainer component={Paper}>\n                <Table size=\"small\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Item</TableCell>\n                            <TableCell>Quantidade</TableCell>\n                            <TableCell>Unidade</TableCell>\n                            <TableCell>Fórmula Química</TableCell>\n                            <TableCell>Peso Molecular</TableCell>\n                            <TableCell>Concentração</TableCell>\n                            <TableCell>Opções</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {items.map((item) => (\n                            <TableRow key={item.id}>\n                                <TableCell>{item.name}</TableCell>\n                                <TableCell>{calculateQtd(item.lots)}</TableCell>\n                                <TableCell>{item.unit}</TableCell>\n                                <TableCell>{item.formula}</TableCell>\n                                <TableCell>{item.molecular_weight}</TableCell>\n                                <TableCell>{item.concentration}</TableCell>\n                                <TableCell>\n                                    <Button\n                                        size=\"small\"\n                                        color=\"primary\"\n                                        onClick={() => history.push(`/items/edit/${item.id}`)}\n                                    >Editar</Button>\n                                    <Button\n                                        size=\"small\"\n                                        color=\"secondary\"\n                                        onClick={() => {\n                                            setSelectedItem(item.id)\n                                            setOpenDialog(true)\n                                        }}\n                                    >Excluir</Button>\n                                    <Button\n                                        size=\"small\"\n                                        onClick={() => history.push(`/items/${item.id}/lots`)}\n                                    >Detalhes</Button>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                    <TableFooter>\n                        <TableRow>\n                            <TablePagination\n                                rowsPerPage={rowsPerPage}\n                                rowsPerPageOptions={[]}\n                                colSpan={3}\n                                page={currentPage - 1}\n                                count={totalItems}\n                                onChangePage={handleChangePage}\n                                labelDisplayedRows={({from, to, count}) =>\n                                    `${from}-${to} de ${\n                                        count !== -1 ? count : `more than ${to}`\n                                    }`\n                                }\n                            />\n                        </TableRow>\n                    </TableFooter>\n                </Table>\n            </TableContainer>\n            <SnackAlert\n                openSnack={openSnack}\n                onClose={handleSnackClose}\n                severity={severity}\n                snackMessage={feedbackMessage}\n            />\n            <Dialog open={openDialog} onClose={handleDialogClose}>\n                <DialogTitle>{\"Apagar item?\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Deseja realmente excluir este item?\n                        <strong> Não é possível desfazer esta ação.</strong>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleDialogClose}>Cancelar</Button>\n                    <Button\n                        onClick={() => handleDeleteButton(selectedItem)}\n                        color=\"secondary\"\n                    >\n                        Excluir\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Container>\n    );\n};\n\nexport default Items;\n","import React, {useState, useEffect} from 'react'\nimport {useLocation, useHistory} from 'react-router-dom'\nimport Box from \"@material-ui/core/Box\";\nimport Container from \"@material-ui/core/Container\";\nimport TextField from \"@material-ui/core/TextField\";\nimport api from \"../../../services/api\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport ptBRLocale from \"date-fns/locale/pt-BR\";\nimport {KeyboardDatePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\nimport styles from './styles.module.css'\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SnackAlert from \"../../../components/SnackAlert\";\n\nconst NewLot = () => {\n\n    const initialItemState = {\n        name: ''\n    }\n\n    const [item, setItem] = useState(initialItemState)\n    const [description, setDescription] = useState('')\n    const [expiration, setExpiration] = useState(new Date())\n    const [qtd, setQtd] = useState(0)\n    const itemId = new URLSearchParams(useLocation().search).get('item')\n\n    const [snackMessage, setSnackMessage] = useState('')\n    const [openSnack, setOpenSnack] = useState(false)\n    const [severity, setSeverity] = useState('success')\n    const history = useHistory()\n\n    useEffect(() => {\n        api.get(`/items/${itemId}`)\n            .then(response => {\n                setItem(response.data)\n            })\n            .catch(error => {\n                setSnackMessage(error.response.data.error)\n                setSeverity('error')\n                setOpenSnack(true)\n            })\n    }, [itemId])\n\n    const handleCloseSnack = () => {\n        if (severity === 'success') {\n            history.push(`/items/${itemId}/lots`)\n        }\n        setOpenSnack(false)\n    }\n\n    const handleSubmit = event => {\n        event.preventDefault()\n        const data = {\n            description,\n            expiration,\n            qtd,\n            'item_id': itemId\n        }\n        api.post('/lots', data)\n            .then(response => {\n                setSnackMessage(`O lote #${response.data.id} foi criado com sucesso.`)\n                setSeverity(\"success\")\n                setOpenSnack(true)\n            })\n            .catch(error => {\n                setSnackMessage(error.response.data.error)\n                setSeverity(\"error\")\n                setOpenSnack(true)\n            })\n    }\n\n    return (\n        <Container>\n            <h1>Novo lote</h1>\n            <Box mb={2}>\n                <Typography><strong>Item:</strong> {item.name.toUpperCase()}</Typography>\n                <Typography><strong>Marca:</strong> {item.brand}</Typography>\n                <Typography><strong>Unidade:</strong> {item.unit}</Typography>\n                <Typography><strong>Fórmula:</strong> {item.formula ? item.formula : 'Não se aplica'}</Typography>\n                <Typography><strong>Peso\n                    molecular:</strong> {item.molecular_weight ? item.molecular_weight : 'Não se aplica'}</Typography>\n                <Typography><strong>Concentração:</strong> {item.concentration ? item.concentration : 'Não se aplica'}\n                </Typography>\n            </Box>\n            <form onSubmit={handleSubmit}>\n                <Box className={styles.formRow}>\n                    <TextField label=\"Descrição\" value={description}\n                               onChange={event => setDescription(event.target.value)}\n                               required\n                               className={styles.descriptionField}\n                    />\n                    <MuiPickersUtilsProvider utils={DateFnsUtils} locale={ptBRLocale}>\n                        <KeyboardDatePicker\n                            label=\"Validade\"\n                            views={['month', 'year']}\n                            format=\"MM/yyyy\"\n                            onChange={(date) => setExpiration(date)}\n                            value={expiration}\n                            variant=\"inline\"\n                            disableToolbar\n                            autoOk\n                        />\n                    </MuiPickersUtilsProvider>\n                    <TextField label=\"Quantidade\" value={qtd} onChange={event => setQtd(event.target.value)}\n                               type=\"number\"\n                               required\n                               inputProps={{\n                                   min: 0.1,\n                                   step: 0.1\n                               }}\n                    />\n                </Box>\n                <Box mt={2} className={styles.buttonsRow}>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        type=\"submit\"\n                    >Salvar</Button>\n                    <Button\n                        variant=\"contained\"\n                        type=\"submit\"\n                        onClick={() => history.goBack()}\n                    >Voltar</Button>\n                </Box>\n            </form>\n            <SnackAlert onClose={handleCloseSnack} openSnack={openSnack} severity={severity} snackMessage={snackMessage} />\n        </Container>\n    )\n}\n\nexport default NewLot","import React, {useState, useEffect} from 'react'\nimport {useParams, useHistory} from 'react-router-dom'\nimport Box from \"@material-ui/core/Box\";\nimport Container from \"@material-ui/core/Container\";\nimport TextField from \"@material-ui/core/TextField\";\nimport api from \"../../../services/api\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport ptBRLocale from \"date-fns/locale/pt-BR\";\nimport {KeyboardDatePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\nimport styles from './styles.module.css'\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SnackAlert from \"../../../components/SnackAlert\";\n\nconst EditLot = () => {\n\n    const initialLotState = {\n        id: 0,\n        description: '',\n        expiration: new Date(),\n        qtd: 0,\n        item_id: 0\n    }\n\n    const initialItemState = {\n        name: ''\n    }\n\n    const {lotId} = useParams()\n    const [item, setItem] = useState(initialItemState)\n    const [lot, setLot] = useState(initialLotState)\n    const [snackMessage, setSnackMessage] = useState('')\n    const [openSnack, setOpenSnack] = useState(false)\n    const [severity, setSeverity] = useState('success')\n    const history = useHistory()\n\n    useEffect(() => {\n        api.get(`/lots/${lotId}`)\n            .then(response => {\n                setLot(response.data)\n                api.get(`/items/${response.data.item_id}`)\n                    .then(response => {\n                        setItem(response.data)\n                    })\n                    .catch(error => {\n                        setSnackMessage(error.response.data.error)\n                        setSeverity('error')\n                        setOpenSnack(true)\n                    })\n            })\n            .catch(error => {\n                setSnackMessage(error.response.data.error)\n                setSeverity('error')\n                setOpenSnack(true)\n            })\n    }, [lotId])\n\n    const handleCloseSnack = () => {\n        if (severity === 'success') {\n            history.push(`/items/${lot.item_id}/lots`)\n        }\n        setOpenSnack(false)\n    }\n\n    const handleChange = event => {\n        const {name, value} = event.target\n        setLot({...lot, [name]: value})\n    }\n\n    const handleSubmit = event => {\n        event.preventDefault()\n        api.put(`/lots/${lot.id}`, lot)\n            .then(response => {\n                setSnackMessage(`O lote #${response.data.id} foi alterado com sucesso.`)\n                setSeverity(\"success\")\n                setOpenSnack(true)\n            })\n            .catch(error => {\n                setSnackMessage(error.response.data.error)\n                setSeverity(\"error\")\n                setOpenSnack(true)\n            })\n    }\n\n    return (\n        <Container>\n            <h1>Editar lote</h1>\n            <Box mb={2}>\n                <Typography><strong>Item:</strong> {item.name.toUpperCase()}</Typography>\n                <Typography><strong>Marca:</strong> {item.brand}</Typography>\n                <Typography><strong>Unidade:</strong> {item.unit}</Typography>\n                <Typography><strong>Fórmula:</strong> {item.formula ? item.formula : 'Não se aplica'}</Typography>\n                <Typography><strong>Peso\n                    molecular:</strong> {item.molecular_weight ? item.molecular_weight : 'Não se aplica'}</Typography>\n                <Typography><strong>Concentração:</strong> {item.concentration ? item.concentration : 'Não se aplica'}\n                </Typography>\n            </Box>\n            <form onSubmit={handleSubmit}>\n                <Box className={styles.formRow}>\n                    <TextField label=\"Descrição\" value={lot.description}\n                               onChange={handleChange}\n                               required\n                               className={styles.descriptionField}\n                               name=\"description\"\n                    />\n                    <MuiPickersUtilsProvider utils={DateFnsUtils} locale={ptBRLocale}>\n                        <KeyboardDatePicker\n                            label=\"Validade\"\n                            views={['month', 'year']}\n                            format=\"MM/yyyy\"\n                            onChange={date => setLot({...lot, expiration: date})}\n                            value={lot.expiration}\n                            variant=\"inline\"\n                            disableToolbar\n                            autoOk\n\n                        />\n                    </MuiPickersUtilsProvider>\n                    <TextField label=\"Quantidade\" value={lot.qtd} onChange={handleChange}\n                               type=\"number\"\n                               required\n                               name=\"qtd\"\n                               inputProps={{\n                                   min: 0.1,\n                                   step: 0.1\n                               }}\n                    />\n                </Box>\n                <Box mt={2} className={styles.buttonsRow}>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        type=\"submit\"\n                    >Salvar</Button>\n                    <Button\n                        variant=\"contained\"\n                        type=\"submit\"\n                        onClick={() => history.goBack()}\n                    >Voltar</Button>\n                </Box>\n            </form>\n            <SnackAlert onClose={handleCloseSnack} openSnack={openSnack} severity={severity} snackMessage={snackMessage} />\n        </Container>\n    )\n}\n\nexport default EditLot","import React, {useEffect, useState} from 'react'\nimport Container from \"@material-ui/core/Container\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Button from \"@material-ui/core/Button\"\nimport SnackAlert from \"../../../components/SnackAlert\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {getFormattedDate} from \"../../../utils/formatDate\";\n\nimport {useHistory} from 'react-router-dom'\nimport api from '../../../services/api'\n\nconst MyOrders = () => {\n    const [orders, setOrders] = useState([])\n    const [snackMessage, setSnackMessage] = useState('')\n    const [severity, setSeverity] = useState('success')\n    const [openSnack, setOpenSnack] = useState(false)\n    const currentUser = sessionStorage.getItem('userId')\n    const history = useHistory()\n\n    const handleCloseSnackbar = () => {\n        setOpenSnack(false)\n    }\n\n    useEffect(() => {\n        api.get(`/user/${currentUser}/orders`)\n            .then(response => {\n                setOrders(response.data)\n            })\n            .catch(error => {\n                setSnackMessage(error.response.data)\n                setSeverity('error')\n                setOpenSnack(true)\n            })\n    }, [currentUser])\n\n    return (\n        <Container>\n            <h1>Meus pedidos</h1>\n            <TableContainer component={Paper}>\n                <Table size=\"small\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Pedido</TableCell>\n                            <TableCell>Data de entrega</TableCell>\n                            <TableCell>Liberada?</TableCell>\n                            <TableCell>Detalhes</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {orders.map(order => (\n                            <TableRow key={order.id} hover>\n                                <TableCell>{order.id}</TableCell>\n                                <TableCell>{order.hasOwnProperty('due_date') ? getFormattedDate(order.due_date) : ''}</TableCell>\n                                <TableCell>{order.dispatched !== 'created' ? 'Sim' : 'Não'}</TableCell>\n                                <TableCell>\n                                    <Button variant=\"contained\"\n                                            onClick={() => history.push(`/orders/detail/${order.id}`)}\n                                            color=\"primary\"\n                                            size=\"small\"\n                                    >Abrir pedido</Button>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <SnackAlert onClose={handleCloseSnackbar} openSnack={openSnack} severity={severity}\n                        snackMessage={snackMessage}/>\n        </Container>\n    )\n}\n\nexport default MyOrders","import React, {useEffect, useState} from 'react'\nimport Container from \"@material-ui/core/Container\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\"\nimport api from \"../../../services/api\";\nimport Paper from \"@material-ui/core/Paper\"\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport SnackAlert from \"../../../components/SnackAlert\";\nimport {useHistory} from 'react-router-dom'\nimport styles from './styles.module.css'\n\nconst NewUser = () => {\n\n    const [roles, setRoles] = useState([])\n    const [username, setUsername] = useState('')\n    const [selectedRole, setSelectedRole] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [passwordConfirmation, setPasswordConfirmation] = useState('')\n    const [passwordCheck, setPasswordCheck] = useState(false)\n    const [openDialog, setOpenDialog] = useState(false)\n    const [openSnack, setOpenSnack] = useState(false)\n    const [dialogMessage, setDialogMessage] = useState('')\n    const [snackMessage, setSnackMessage] = useState('')\n    const [severity, setSeverity] = useState('success')\n    const history = useHistory()\n\n    useEffect(() => {\n        api.get('/roles')\n            .then(response => {\n                setRoles(response.data)\n            })\n            .catch(error => {\n                setSnackMessage(`Houve um erro em sua requisição. Status: [${error.response.status}]`)\n                setSeverity('error')\n                setOpenSnack(true)\n            })\n    }, [])\n\n    const handleDialogClose = () => {\n        setOpenDialog(false)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        if (password !== passwordConfirmation) {\n            setDialogMessage('As senhas devem ser iguais!')\n            setOpenDialog(true)\n            return\n        }\n\n        const data = {\n            username,\n            email,\n            password,\n            role_id: selectedRole\n        }\n\n        api.post('/users', data)\n            .then(response => {\n                setSnackMessage(`O usuário \"${response.data.username}\" foi incluído com sucesso.`)\n                setSeverity('success')\n                setOpenSnack(true)\n            })\n            .catch(error => {\n                setSnackMessage(`Houve um erro em sua requisição. Status: [${error.response.status}]`)\n                setSeverity('error')\n                setOpenSnack(true)\n            })\n    }\n\n    const resetForm = () => {\n        setUsername('')\n        setSelectedRole('')\n        setEmail('')\n        setPassword('')\n        setPasswordConfirmation('')\n    }\n\n    const handleSnackClose = () => {\n        if (severity === 'success') {\n            history.push('/users')\n        }\n        setOpenSnack(false)\n    }\n\n    const checkPasswordConfirmation = event => {\n        if (event.target.value !== password) {\n            setPasswordCheck(true)\n        } else {\n            setPasswordCheck(false)\n        }\n        setPasswordConfirmation(event.target.value)\n    }\n\n    return (\n        <Container>\n            <h1>Novo usuário</h1>\n            <Paper>\n                <form onSubmit={handleSubmit} className={styles.form}>\n                    <div className={styles['form-row']}>\n                        <TextField label=\"Nome\" required onChange={(event) => setUsername(event.target.value)}\n                                   value={username}\n                                   className={styles['input-field']}\n                        />\n                        <TextField label=\"E-mail\" type=\"email\" required onChange={event => setEmail(event.target.value)}\n                                   value={email}\n                                   className={styles['input-field']}\n                        />\n                    </div>\n                    <div className={styles['form-row']}>\n                        <TextField label=\"Senha\" type=\"password\" required\n                                   onChange={event => setPassword(event.target.value)}\n                                   value={password}\n                                   className={styles['input-field']}\n                                   inputProps={{\n                                       autoComplete: 'current-password'\n                                   }}\n                        />\n                        <TextField label=\"Confirme a senha\" type=\"password\" required\n                                   onChange={checkPasswordConfirmation} value={passwordConfirmation}\n                                   className={styles['input-field']}\n                                   error={passwordCheck}\n                                   helperText={passwordCheck ? 'As senhas estão diferentes' : ''}\n                                   inputProps={{\n                                       autoComplete: 'current-password'\n                                   }}\n                        />\n                        <TextField label=\"Perfil\" select value={selectedRole}\n                                   onChange={event => setSelectedRole(event.target.value)}\n                                   required\n                                   className={styles['input-field']}\n                        >\n                            <MenuItem value=\"\">Selecione</MenuItem>\n                            {roles.map(role => (\n                                <MenuItem key={role.id} value={role.id}>{role.description}</MenuItem>\n                            ))}\n                        </TextField>\n                    </div>\n                    <div className={styles[\"buttons-row\"]}>\n                        <Button variant=\"contained\" color=\"primary\" type=\"submit\">Salvar</Button>\n                        <Button variant=\"contained\" color=\"default\" onClick={resetForm}>Limpar</Button>\n                    </div>\n                </form>\n            </Paper>\n            <SnackAlert snackMessage={snackMessage} severity={severity} openSnack={openSnack}\n                        onClose={handleSnackClose}/>\n            <Dialog open={openDialog} onClose={handleDialogClose} maxWidth=\"sm\" fullWidth>\n                <DialogContent>\n                    <DialogContentText>\n                        {dialogMessage}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button color=\"primary\">\n                        Fechar\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Container>\n    )\n}\n\nexport default NewUser","import React, {useEffect, useState} from 'react'\nimport Container from \"@material-ui/core/Container\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\"\nimport api from \"../../../services/api\";\nimport Paper from \"@material-ui/core/Paper\"\nimport SnackAlert from \"../../../components/SnackAlert\";\nimport {useHistory, useParams} from 'react-router-dom'\nimport styles from './styles.module.css'\n\nconst EditUser = () => {\n\n    const [roles, setRoles] = useState([])\n    const [username, setUsername] = useState('')\n    const [selectedRole, setSelectedRole] = useState('')\n    const [email, setEmail] = useState('')\n    const [openSnack, setOpenSnack] = useState(false)\n    const [snackMessage, setSnackMessage] = useState('')\n    const [severity, setSeverity] = useState('success')\n    const {id} = useParams()\n    const history = useHistory()\n\n    useEffect(() => {\n        api.get('/roles')\n            .then(response => {\n                setRoles(response.data)\n            })\n            .catch(error => {\n                setSnackMessage(`Houve um erro em sua requisição. Status: [${error.response.status}]`)\n                setSeverity('error')\n                setOpenSnack(true)\n            })\n        api.get(`/users/${id}`)\n            .then(response => {\n                setUsername(response.data.username)\n                setEmail(response.data.email)\n                setSelectedRole(response.data.role_id)\n            })\n            .catch(error => {\n                setSnackMessage(`Houve um erro em sua solicitação. Status [${error.response.status}]`)\n                setSeverity('error')\n                setOpenSnack(true)\n            })\n    }, [id])\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n\n        const data = {\n            id,\n            username,\n            email,\n            role_id: selectedRole\n        }\n\n        api.put(`/users/${id}`, data)\n            .then(response => {\n                setSnackMessage(`O usuário \"${response.data.username}\" foi alterado com sucesso.`)\n                setSeverity('success')\n                setOpenSnack(true)\n            })\n            .catch(error => {\n                setSnackMessage(`Houve um erro em sua requisição. Status: [${error.response.status}]`)\n                setSeverity('error')\n                setOpenSnack(true)\n            })\n    }\n\n    const handleSnackClose = () => {\n        if (severity === 'success') {\n            history.push('/users')\n        }\n        setOpenSnack(false)\n    }\n\n    return (\n        <Container>\n            <h1>Novo usuário</h1>\n            <Paper>\n                <form onSubmit={handleSubmit} className={styles.form}>\n                    <div className={styles['form-row']}>\n                        <TextField label=\"Nome\" required onChange={(event) => setUsername(event.target.value)}\n                                   value={username}\n                                   className={styles['input-field']}\n                        />\n                        <TextField label=\"E-mail\" type=\"email\" required onChange={event => setEmail(event.target.value)}\n                                   value={email}\n                                   className={styles['input-field']}\n                        />\n                    </div>\n                    <div className=\"form-row\">\n                        <TextField label=\"Perfil\" select value={selectedRole}\n                                   onChange={event => setSelectedRole(event.target.value)}\n                                   required\n                                   className={styles['input-field']}\n                        >\n                            {roles.map(role => (\n                                <MenuItem key={role.id} value={role.id}>{role.description}</MenuItem>\n                            ))}\n                        </TextField>\n                    </div>\n                    <div className={styles['buttons-row']}>\n                        <Button variant=\"contained\" color=\"primary\" type=\"submit\">Salvar</Button>\n                        <Button variant=\"contained\" color=\"default\" onClick={() => history.goBack()}>Voltar</Button>\n                    </div>\n                </form>\n            </Paper>\n            <SnackAlert snackMessage={snackMessage} severity={severity} openSnack={openSnack}\n                        onClose={handleSnackClose}/>\n        </Container>\n    )\n}\n\nexport default EditUser","import React, {useState, useEffect} from 'react'\nimport {useHistory, useParams} from 'react-router-dom'\nimport SnackAlert from \"../../../components/SnackAlert\";\nimport Container from \"@material-ui/core/Container\";\nimport Paper from \"@material-ui/core/Paper\"\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\"\nimport api from \"../../../services/api\";\nimport styles from './styles.module.css'\n\nconst RedefinePass = () => {\n\n    const _user = {\n        username: ''\n    }\n    const [user, setUser] = useState(_user)\n    const [password, setPassword] = useState('')\n    const [passwordConfirmation, setPasswordConfirmation] = useState('')\n    const [passwordError, setPasswordError] = useState(false)\n    const [openSnack, setOpenSnack] = useState(false)\n    const [snackMessage, setSnackMessage] = useState('')\n    const [severity, setSeverity] = useState('success')\n    const {id} = useParams()\n    const history = useHistory()\n\n    useEffect(() => {\n        api.get(`/users/${id}`)\n            .then(response => {\n                setUser(response.data)\n            })\n            .catch(error => {\n                setSnackMessage(`Não foi possível concluir sua solicitação. Status [${error.response.status}]`)\n                setSeverity('error')\n                setOpenSnack(true)\n            })\n    }, [id])\n\n    const handleCloseSnack = () => {\n        if (severity === 'success') {\n            history.push('/users')\n        }\n        setOpenSnack(false)\n    }\n\n    const checkPasswordConfirmation = event => {\n        const newPassword = event.target.value\n        if (newPassword !== password) {\n            setPasswordError(true)\n        } else {\n            setPasswordError(false)\n        }\n        setPasswordConfirmation(newPassword)\n    }\n\n    const handleSubmit = event => {\n        event.preventDefault()\n        if (password !== passwordConfirmation) {\n            setSnackMessage('As senhas devem ser iguais.')\n            setSeverity('error')\n            setOpenSnack(true)\n            return null\n        }\n        const data = {\n            id,\n            password\n        }\n\n        api.put(`/users/${id}/redefine`, data)\n            .then(response => {\n                setSnackMessage('Senha alterada!')\n                setSeverity('success')\n                setOpenSnack(true)\n            })\n            .catch(error => {\n                setSnackMessage(`Houve um erro em sua solicitação. Status [${error.response.status}]`)\n                setSeverity('error')\n                setOpenSnack(true)\n            })\n    }\n\n    return (\n        <Container>\n            <h1>Redefinir senha</h1>\n            <Typography variant=\"subtitle2\">Atenção! Esta funcionalidade deve ser utilizada apenas a pedido do usuário\n                e, preferencialmente, em sua presença.</Typography>\n            <Paper>\n                <form onSubmit={handleSubmit} className={styles.form}>\n                    <TextField label=\"Nome do usuário\" value={user.username} InputProps={{readOnly: true}}/>\n                    <TextField label=\"Nova senha\" value={password} inputProps={{autoComplete: 'password'}}\n                               onChange={event => setPassword(event.target.value)}\n                               type=\"password\"\n                    />\n                    <TextField label=\"Confirme a nova senha\" value={passwordConfirmation} inputProps={{autoComplete: 'password'}}\n                               onChange={checkPasswordConfirmation}\n                               error={passwordError}\n                               helperText={passwordError ? 'As senhas estão diferentes' : ''}\n                               type=\"password\"\n                    />\n                    <div className={styles['button-row']}>\n                        <Button variant=\"contained\" color=\"primary\" type=\"submit\">Salvar</Button>\n                        <Button variant=\"contained\" onClick={() => history.goBack()}>Voltar</Button>\n                    </div>\n                </form>\n            </Paper>\n            <SnackAlert onClose={handleCloseSnack} openSnack={openSnack} severity={severity} snackMessage={snackMessage} />\n        </Container>\n    )\n}\n\nexport default RedefinePass","import React, {useEffect, useState} from 'react'\nimport Container from \"@material-ui/core/Container\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Button from '@material-ui/core/Button'\nimport api from '../../services/api'\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport {useHistory} from 'react-router-dom'\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport Paper from '@material-ui/core/Paper'\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport LockIcon from \"@material-ui/icons/Lock\"\n\nconst Users = () => {\n    const [users, setUsers] = useState([])\n    const [selectedItem, setSelectedItem] = useState(0)\n    const [openDialog, setOpenDialog] = useState(false)\n    const history = useHistory()\n\n    const fetchData = () => {\n        let _isMounted = true\n        api.get('/users')\n            .then(response => {\n                if (_isMounted) {\n                    setUsers(response.data)\n                }\n            })\n            .catch(error => {\n                console.log(error.response)\n            })\n        return () => _isMounted = false\n    }\n\n    useEffect(() => {\n        fetchData()\n    }, [])\n\n    const handleDialogClose = () => {\n        setOpenDialog(false)\n    }\n\n    const handleDeleteButton = () => {\n        api.delete(`/users/${selectedItem}`)\n            .then(response => {\n                fetchData()\n                setOpenDialog(false)\n            })\n    }\n\n    return (\n        <Container>\n            <h1>Usuários</h1>\n            <Button\n                onClick={() => {\n                    history.push(\"/users/new\");\n                }}\n                variant=\"contained\"\n                color=\"primary\"\n                startIcon={<AddCircleIcon />}\n                style={{ marginBottom: 20 }}\n            >\n                Novo usuário\n            </Button>\n            <TableContainer component={Paper}>\n                <Table>\n\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Nome</TableCell>\n                            <TableCell>E-mail</TableCell>\n                            <TableCell>Perfil</TableCell>\n                            <TableCell>Opções</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {users.map(user => (\n                            <TableRow key={user.id} hover>\n                                <TableCell>{user.username}</TableCell>\n                                <TableCell>{user.email}</TableCell>\n                                <TableCell>{user.role.description}</TableCell>\n                                <TableCell>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"default\"\n                                        startIcon={<EditIcon />}\n                                        onClick={() => {\n                                            history.push(`users/edit/${user.id}`);\n                                        }}\n                                        size=\"small\"\n                                    >\n                                        Editar\n                                    </Button>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        size=\"small\"\n                                        startIcon={<LockIcon />}\n                                        style={{ marginRight: 5, marginLeft: 5 }}\n                                        onClick={() => history.push(`/users/${user.id}/redefine`)}\n                                    >\n                                        Redefinir senha\n                                    </Button>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                        startIcon={<DeleteIcon />}\n                                        onClick={() => {\n                                            setSelectedItem(user.id);\n                                            setOpenDialog(true);\n                                        }}\n                                        size=\"small\"\n                                    >\n                                        Excluir\n                                    </Button>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <Dialog open={openDialog} onClose={handleDialogClose}>\n                <DialogTitle>{\"Apagar item?\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Deseja realmente excluir este item?\n                        <strong> Não é possível desfazer esta ação.</strong>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleDialogClose}>Cancelar</Button>\n                    <Button\n                        onClick={() => handleDeleteButton(selectedItem)}\n                        color=\"secondary\"\n                    >\n                        Excluir\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Container>\n    )\n}\n\nexport default Users","import React, {useState, useEffect} from \"react\";\nimport {useHistory, useParams} from 'react-router-dom'\nimport api from \"../../../services/api\";\nimport SnackAlert from \"../../../components/SnackAlert\";\nimport Container from \"@material-ui/core/Container\";\nimport Paper from \"@material-ui/core/Paper\"\nimport Typography from \"@material-ui/core/Typography\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TextField from \"@material-ui/core/TextField\"\nimport Button from \"@material-ui/core/Button\";\nimport {getFormattedDate} from \"../../../utils/formatDate\";\nimport styles from './styles.module.css'\n\nconst Row = ({item, onChange}) => {\n\n    const handleChange = event => {\n        const lot = {\n            id: event.target.dataset.id,\n            qtySubtracted: event.target.value\n        }\n        onChange(lot)\n    }\n\n    return (\n        <>\n            <TableRow hover>\n                <TableCell>{item.name}</TableCell>\n                <TableCell>{item.unit}</TableCell>\n                <TableCell>{item.brand}</TableCell>\n                <TableCell>{item.formula}</TableCell>\n                <TableCell>{item.molecular_weight}</TableCell>\n                <TableCell>{item.concentration}</TableCell>\n                <TableCell>{item.pivot.qtd}</TableCell>\n            </TableRow>\n            <TableRow>\n                <TableCell colSpan={7}>\n                    <p><strong>Lotes disponíveis ({item.name})</strong></p>\n                    <Paper elevation={3}>\n                        <Table size=\"small\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell />\n                                    <TableCell>Descrição</TableCell>\n                                    <TableCell>Validade</TableCell>\n                                    <TableCell>Disponível</TableCell>\n                                    <TableCell>Quantidade</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {item.lots.map((lot, index) => (\n                                    <TableRow key={lot.id}>\n                                        {index === 0 ? <TableCell rowSpan={item.lots.length} /> : null}\n                                        <TableCell>{lot.description}</TableCell>\n                                        <TableCell>{getFormattedDate(lot.expiration)}</TableCell>\n                                        <TableCell>{lot.qtd}</TableCell>\n                                        <TableCell>\n                                            <TextField onChange={handleChange}\n                                                       inputProps={{ 'data-id': lot.id, max: lot.qtd, min: 0}}\n                                                       type=\"number\"\n                                                       required={index === 0 ? true : false}\n                                            />\n                                        </TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </Paper>\n                </TableCell>\n            </TableRow>\n        </>\n    )\n}\n\nconst DispatchOrder = () => {\n\n    const [order, setOrder] = useState({})\n    const [qtyPerLot, setQtyPerLot] = useState([])\n    const [severity, setSeverity] = useState('error')\n    const [openSnack, setOpenSnack] = useState(false)\n    const [snackMessage, setSnackMessage] = useState('')\n    const {orderId} = useParams()\n    const history = useHistory()\n\n    useEffect(() => {\n        api.get(`orders/${orderId}/items/lots`)\n            .then(response => {\n                setOrder(response.data)\n            })\n            .catch(error => {\n                setSnackMessage(`Houve um erro sua solicitação. Status: [${error.response.status}]`)\n                setSeverity('error')\n                setOpenSnack(true)\n            })\n    }, [orderId])\n\n    const handleCloseSnack = () => {\n        if (severity === 'success') {\n            history.push('/orders')\n        }\n        setOpenSnack(false)\n    }\n\n    const handleChange = changedLot => {\n        let qtyPerLotsCopy = qtyPerLot\n        const index = qtyPerLotsCopy.findIndex(lot => lot.id === changedLot.id)\n        if (index < 0) {\n            qtyPerLotsCopy.push(changedLot)\n        } else {\n            qtyPerLotsCopy[index] = changedLot\n        }\n        setQtyPerLot(qtyPerLotsCopy)\n    }\n\n    const handleSubmit = event => {\n        event.preventDefault()\n        const data = {\n            lotsInformation: qtyPerLot\n        }\n        api.put(`/orders/dispatch/${orderId}`, data)\n            .then(response => {\n                setSnackMessage('O pedido foi liberado com sucesso!')\n                setSeverity('success')\n                setOpenSnack(true)\n            })\n            .catch(error => {\n                setSnackMessage(error.response.data.error)\n                setSeverity('error')\n                setOpenSnack(true)\n            })\n    }\n\n    return (\n        <Container>\n            <h1>Liberar pedido #{order.id}</h1>\n            <Typography>Data do\n                pedido: {order.hasOwnProperty('created_at') ? getFormattedDate(order.created_at) : ''}</Typography>\n            <Typography>Data de\n                entrega: {order.hasOwnProperty('due_date') ? getFormattedDate(order.due_date) : ''}</Typography>\n            <h2>Itens</h2>\n            <form onSubmit={handleSubmit}>\n                <TableContainer component={Paper}>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Item</TableCell>\n                                <TableCell>Unidade</TableCell>\n                                <TableCell>Marca</TableCell>\n                                <TableCell>Fórmula</TableCell>\n                                <TableCell>Peso molecular</TableCell>\n                                <TableCell>Concentração</TableCell>\n                                <TableCell>Quantidade solicitada</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {order.hasOwnProperty('items') ? order.items.map(item => (\n                                <Row item={item} key={item.id} onChange={handleChange} />\n                            )) : <TableRow><TableCell colSpan={7}>{'Sem resultados.'}</TableCell></TableRow>}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <div className={styles['button-row']}>\n                    <Button variant=\"contained\" color=\"primary\" type=\"submit\">Liberar</Button>\n                    <Button variant=\"contained\" onClick={() => history.goBack()}>Voltar</Button>\n                </div>\n            </form>\n            <SnackAlert snackMessage={snackMessage} severity={severity} openSnack={openSnack}\n                        onClose={handleCloseSnack}/>\n        </Container>\n    )\n}\n\nexport default DispatchOrder","import React, {useEffect, useState} from 'react'\nimport {useParams, useHistory} from 'react-router-dom'\nimport Container from \"@material-ui/core/Container\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper'\nimport api from '../../../services/api'\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {getFormattedDate} from \"../../../utils/formatDate\";\n\nconst OrderDetail = () => {\n    const initialOrder = {\n        id: null,\n        due_date: null,\n        due_time: null,\n        user: {\n            username: '',\n            email: ''\n        },\n        lab: {\n            description: ''\n        },\n        course: {\n            description: ''\n        },\n        items: []\n    }\n    const [order, setOrder] = useState(initialOrder)\n    const [grant, setGrant] = useState(false)\n    const currentRoleId = sessionStorage.getItem('roleId')\n    const {id} = useParams()\n    const history = useHistory()\n\n    useEffect(() => {\n        api.get(`/roles/${currentRoleId}`)\n            .then(response => {\n                if (response.data.description === 'Almoxarifado') {\n                    setGrant(true)\n                }\n            })\n            .catch(error => {\n                console.log(error.response)\n            })\n        api.get(`/orders/${id}`)\n            .then(response => {\n                setOrder(response.data)\n            })\n            .catch(error => {\n                console.log(error.response.data)\n            })\n    }, [currentRoleId, id])\n\n    const dispatchButton = () => {\n        return (\n            <div style={{ display: 'flex', justifyContent: 'flex-end', marginBottom: 10}}>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => history.push(`/orders/${order.id}/items/lots`)}\n                >\n                    Liberar pedido\n                </Button>\n            </div>\n        )\n    }\n\n    return (\n        <Container>\n            <h1>Pedido #{order.id}</h1>\n            <Typography><strong>Solicitante:</strong> {order.user.username} {`(${order.user.email})`}</Typography>\n            <Typography><strong>Data de\n                entrega:</strong> {order.hasOwnProperty('due_date') ? getFormattedDate(order.due_date) : ''}\n            </Typography>\n            <Typography><strong>Hora de entrega:</strong> {order.due_time}</Typography>\n            <Typography><strong>Curso:</strong> {order.course.description}</Typography>\n            <Typography><strong>Laboratório:</strong> {order.lab.description}</Typography>\n            <Typography><strong>Liberada:</strong> {order.dispatched !== 'created' ? 'Sim' : 'Não'}</Typography>\n            {grant && order.dispatched === 'created' ? dispatchButton() : null}\n            <div>\n                <TableContainer component={Paper}>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Nome</TableCell>\n                                <TableCell>Marca</TableCell>\n                                <TableCell>Unidade</TableCell>\n                                <TableCell>Quantidade solicitada</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {!order.items ? null : order.items.map(item => (\n                                <TableRow key={item.id} hover>\n                                    <TableCell>{item.name}</TableCell>\n                                    <TableCell>{item.brand}</TableCell>\n                                    <TableCell>{item.unit}</TableCell>\n                                    <TableCell>{item.pivot.qtd}</TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n            <Button onClick={() => history.goBack()} variant=\"contained\" style={{marginTop: 10}}>Voltar</Button>\n        </Container>\n    )\n\n}\n\nexport default OrderDetail","import React, { forwardRef } from \"react\";\n\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\n\nexport const tableIcons = {\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n    DetailPanel: forwardRef((props, ref) => (\n        <ChevronRight {...props} ref={ref} />\n    )),\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    PreviousPage: forwardRef((props, ref) => (\n        <ChevronLeft {...props} ref={ref} />\n    )),\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n    SortArrow: forwardRef((props, ref) => (\n        <ArrowDownward {...props} ref={ref} />\n    )),\n    ThirdStateCheck: forwardRef((props, ref) => (\n        <Remove {...props} ref={ref} />\n    )),\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nexport const localization = {\n    body: {\n        emptyDataSourceMessage: 'Sem registros para exibir',\n        addTooltip: 'Adicionar',\n        deleteTooltip: 'Excluir',\n        editTooltip: 'Editar',\n        filterRow: {\n            filterPlaceHolder: '',\n            filterTooltip: 'Filtro'\n        },\n        editRow: {\n            deleteText: 'Tem certeza que você quer excluir esta linha?',\n            cancelTooltip: 'Cancelar',\n            saveTooltip: 'Salvar'\n        },\n    },\n    grouping: {\n        placeholder: 'Arrastar títulos...',\n        groupedBy: 'Agrupado por:'\n    },\n    header: {\n        actions: 'Ações'\n    },\n    pagination: {\n        labelDisplayedRows: '{from}-{to} de {count}',\n        labelRowsSelect: 'linhas',\n        labelRowsPerPage: 'Linhas por página:',\n        firstAriaLabel: 'Primeira página',\n        firstTooltip: 'Primeira página',\n        previousAriaLabel: 'Página anterior',\n        previousTooltip: 'Página anterior',\n        nextAriaLabel: 'Próxima página',\n        nextTooltip: 'Próxima página',\n        lastAriaLabel: 'Última página',\n        lastTooltip: 'Última página'\n    },\n    toolbar: {\n        addRemoveColumns: 'Adicionar ou remover colunas',\n        nRowsSelected: `{0} linha(s) selecionadas`,\n        showColumnsTitle: 'Mostrar colunas',\n        showColumnsAriaLabel: 'Mostrar colunas',\n        exportTitle: 'Exportar',\n        exportAriaLabel: 'Exportar',\n        exportName: 'Exportar CSV',\n        searchTooltip: 'Procurar',\n        searchPlaceholder: 'Procurar'\n    }\n}\n","import React, {useState, useEffect} from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Button from \"@material-ui/core/Button\";\nimport MaterialTable from \"material-table\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TextField from \"@material-ui/core/TextField\";\nimport api from \"../../../services/api\";\nimport {tableIcons, localization} from \"../../../utils/materialTableUtils\";\nimport {makeStyles} from \"@material-ui/core\";\nimport {Switch, Route, Link as RouterLink, useHistory, useRouteMatch} from \"react-router-dom\";\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport SnackAlert from \"../../../components/SnackAlert\";\nimport Box from \"@material-ui/core/Box\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport {MuiPickersUtilsProvider, KeyboardDatePicker} from '@material-ui/pickers'\nimport DateFnsUtils from '@date-io/date-fns';\nimport ptBRLocale from \"date-fns/locale/pt-BR\";\n\nconst useStyles = makeStyles((theme) => ({\n    continueButton: {\n        marginBottom: 10,\n    },\n    goBackButton: {\n        marginTop: 10,\n    },\n    buttonContainer: {\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n    },\n    inputField: {\n        marginLeft: 10,\n        width: '30ch'\n    },\n    selectFields: {\n        width: '30ch'\n    }\n}));\n\nconst SelectQuantities = ({selectedItems, calculateQtd}) => {\n\n    const [items, setItems] = useState([]);\n    const [labs, setLabs] = useState([])\n    const [courses, setCourses] = useState([])\n    const [selectedLab, setSelectedLab] = useState('')\n    const [selectedCourse, setSelectedCourse] = useState('')\n    const [dueDate, setDueDate] = useState(new Date());\n    const [dueTime, setDueTime] = useState('')\n\n    const classes = useStyles();\n    const history = useHistory();\n\n    const [openDialog, setOpenDialog] = useState(false);\n    const [dialogMessage, setDialogMessage] = useState('');\n    const [openSnack, setOpenSnack] = useState(false);\n    const [severity, setSeverity] = useState('success');\n    const [snackMessage, setSnackMessage] = useState('');\n\n    useEffect(() => {\n        api.get('/labs')\n            .then(response => {\n                setLabs(response.data)\n            })\n            .catch(error => {\n                setSnackMessage('Nao foi possivel carregar os laboratorios.')\n                setSeverity('error')\n                setOpenSnack(true)\n            })\n        api.get('/courses')\n            .then(response => {\n                setCourses(response.data)\n            })\n            .catch(error => {\n                setSnackMessage('Nao foi possivel carregar os cursos.')\n                setSeverity('error')\n                setOpenSnack(true)\n            })\n    }, [])\n\n    const handleChangeQuantity = (changedItem) => {\n        let newItems = items\n        const index = newItems.findIndex(item => item.id === changedItem.id)\n        if (index < 0) {\n            newItems.push(changedItem)\n        } else {\n            newItems[index] = changedItem\n        }\n        setItems(newItems)\n    };\n\n    const handleCloseDialog = () => {\n        setOpenDialog(false)\n    }\n\n    const handleSave = () => {\n        try {\n            const currentUser = sessionStorage.getItem('userId')\n            const data = {\n                'user_id': currentUser,\n                'due_date': dueDate,\n                'due_time': dueTime,\n                'lab_id': selectedLab,\n                'course_id': selectedCourse,\n                items\n            }\n\n            if (!data.lab_id) {\n                setDialogMessage('Selecione um laboratório.')\n                setOpenDialog(true)\n                return\n            }\n\n            if (!data.course_id) {\n                setDialogMessage('Selecione um curso.')\n                setOpenDialog(true)\n                return\n            }\n\n            if (!data.due_date) {\n                setDialogMessage('Selecione uma data de entrega.')\n                setOpenDialog(true)\n                return\n            }\n\n            if (!data.due_time) {\n                setDialogMessage('Selecione um horário de entrega.')\n                setOpenDialog(true)\n                return\n            }\n\n            if (data.items.length < 1 || data.items.length !== selectedItems.length) {\n                setDialogMessage('Você deve definir quantidades para os itens selecionados.')\n                setOpenDialog(true)\n                return\n            }\n\n            let errorFlag = false\n            data.items.forEach(item => {\n                if (!item.qtd || item.qtd <= 0) {\n                    errorFlag = true\n                }\n            })\n            if (errorFlag) return\n\n            api.post('/orders', data)\n                .then(response => {\n                    setSnackMessage(`O pedido #${response.data.id} foi incluído com successo.`)\n                    setSeverity('success')\n                    setOpenSnack(true)\n                })\n                .catch(error => {\n                    setSnackMessage(`Houve um erro em sua requisição. ${error.response.data.error || error.response.status}`)\n                    setSeverity('error')\n                    setOpenSnack(true)\n                })\n        } catch (error) {\n            setDialogMessage(error)\n            setOpenDialog(true)\n        }\n    }\n\n    const handleCloseSnackBar = () => {\n        if (severity === 'success') {\n            history.push('/users/myorders')\n        }\n        setOpenSnack(false)\n    }\n\n    const handleKeyPress = event => {\n        if (event.key === 'Enter') {\n            handleSave()\n        }\n    }\n\n    const getHours = () => {\n        const hours = []\n        for (let i = 0, j = 8; i < 15; i++, j++) {\n            const hour = `${j}:00`\n            hours.push(<MenuItem key={i} value={hour}>{hour}</MenuItem>)\n        }\n        return hours\n    }\n\n    return (\n        <>\n            <Box mb={2}>\n                <Box mb={2}>\n                    <TextField\n                        label=\"Laboratório\"\n                        value={selectedLab}\n                        onChange={event => setSelectedLab(event.target.value)}\n                        select\n                        className={classes.selectFields}\n                    >\n                        {labs.map(lab => (\n                            <MenuItem key={lab.id} value={lab.id}>{lab.description} - {lab.comment}</MenuItem>\n                        ))}\n                    </TextField>\n                    <TextField\n                        label=\"Curso\"\n                        value={selectedCourse}\n                        onChange={event => setSelectedCourse(event.target.value)}\n                        select\n                        className={[classes.inputField, classes.selectFields].join(' ')}\n                    >\n                        {courses.map(course => (\n                            <MenuItem key={course.id} value={course.id}>{course.description}</MenuItem>\n                        ))}\n                    </TextField>\n                </Box>\n                <Box>\n                    <MuiPickersUtilsProvider utils={DateFnsUtils} locale={ptBRLocale}>\n                        <KeyboardDatePicker\n                            label=\"Data de entrega\"\n                            format=\"dd/MM/yyyy\"\n                            onChange={(date) => setDueDate(date)}\n                            value={dueDate}\n                            variant=\"inline\"\n                            disableToolbar\n                            disablePast\n                            autoOk\n                        />\n                    </MuiPickersUtilsProvider>\n                    <TextField\n                        label=\"Hora de entrega\"\n                        value={dueTime}\n                        onChange={event => setDueTime(event.target.value)}\n                        select\n                        className={classes.inputField}\n                    >\n                        {getHours()}\n                    </TextField>\n                </Box>\n                <Box mt={2}>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={handleSave}\n                    >\n                        Salvar\n                    </Button>\n                </Box>\n            </Box>\n            <TableContainer component={Paper}>\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Item</TableCell>\n                            <TableCell>Quantidade disponível</TableCell>\n                            <TableCell>Unidade</TableCell>\n                            <TableCell>Quantidade desejada</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {selectedItems.map((item) => (\n                            <TableRow key={item.id}>\n                                <TableCell>{item.name}</TableCell>\n                                <TableCell>{calculateQtd(item.lots)}</TableCell>\n                                <TableCell>{item.unit}</TableCell>\n                                <TableCell>\n                                    <TextField\n                                        type=\"number\"\n                                        inputProps={{\n                                            min: 0.1,\n                                            step: 0.1,\n                                        }}\n                                        onChange={(event) =>\n                                            handleChangeQuantity({\n                                                id: item.id,\n                                                qtd: event.target.value,\n                                            })\n                                        }\n                                        onKeyPress={handleKeyPress}\n                                    />\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <Button\n                variant=\"contained\"\n                className={classes.goBackButton}\n                onClick={() => history.goBack()}\n            >\n                Voltar\n            </Button>\n            <SnackAlert\n                openSnack={openSnack}\n                onClose={handleCloseSnackBar}\n                severity={severity}\n                snackMessage={snackMessage}\n            />\n            <Dialog open={openDialog} onClose={handleCloseDialog}>\n                <DialogTitle>{'Atenção'}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        {dialogMessage}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleCloseDialog} variant=\"contained\" color=\"primary\">Fechar</Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n};\n\nconst NewOrder = ({match}) => {\n    const [items, setItems] = useState([]);\n    const [selectedItems, setSelectedItems] = useState([]);\n\n    const classes = useStyles();\n    const {path} = useRouteMatch()\n\n    useEffect(() => {\n        api.get(\"items/all\").then((response) => {\n            setItems(response.data);\n        });\n    }, []);\n\n    const calculateQtd = (lots) => {\n        if (lots.length < 1) {\n            return 0;\n        }\n        let qtd = 0;\n        lots.forEach((lot) => {\n            qtd += Number(lot.qtd);\n        });\n        return qtd;\n    };\n\n    return (\n        <Container>\n            <h1>Novo pedido</h1>\n            <Switch>\n                <Route path={`${path}/quantity`}>\n                    <SelectQuantities selectedItems={selectedItems} calculateQtd={calculateQtd}/>\n                </Route>\n                <Route exact path={`${path}`}>\n                    <p>\n                        Selecione os itens desejados abaixo e clique em\n                        continuar\n                    </p>\n                    <div className={classes.buttonContainer}>\n\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.continueButton}\n                            component={RouterLink}\n                            to={\"/orders/new/quantity\"}\n                        >\n                            Continuar\n                        </Button>\n                    </div>\n                    <form>\n                        <MaterialTable\n                            columns={[\n                                {title: \"Item\", field: \"name\"},\n                                {\n                                    title: \"Quantidade disponível\",\n                                    field: \"qtd\",\n                                    render: rowData => calculateQtd(rowData.lots),\n                                    searchable: false,\n                                },\n                                {\n                                    title: \"Unidade\",\n                                    field: \"unit\",\n                                    searchable: false,\n                                },\n                            ]}\n                            data={items}\n                            title=\"Itens disponíveis\"\n                            icons={tableIcons}\n                            localization={localization}\n                            options={{\n                                selection: true,\n                                sorting: false,\n                                draggable: false,\n                            }}\n                            onSelectionChange={(rows) =>\n                                setSelectedItems(rows)\n                            }\n                        />\n                    </form>\n                </Route>\n            </Switch>\n        </Container>\n    );\n};\n\nexport default NewOrder;\n","import React, {useEffect, useState} from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport Container from \"@material-ui/core/Container\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableFooter from \"@material-ui/core/TableFooter\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Button from '@material-ui/core/Button'\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\"\nimport SnackAlert from '../../../components/SnackAlert'\nimport api from \"../../../services/api\";\nimport styles from './styles.module.css';\nimport {getFormattedDate} from \"../../../utils/formatDate\";\n\nconst ListOrders = () => {\n    const [orders, setOrders] = useState([]);\n    const [filter, setFilter] = useState('created')\n    const [openSnack, setOpenSnack] = useState(false)\n    const [severity, setSeverity] = useState('')\n    const [feedbackMessage, setFeedbackMessage] = useState('')\n\n    const history = useHistory();\n\n    useEffect(() => {\n        const url = `/orders?filter=${filter}`\n        api.get(url)\n            .then((response) => {\n                setOrders(response.data);\n            })\n            .catch(error => {\n                setFeedbackMessage(`Houve um problema em sua solicitação. Status: [${error.response.status}]`)\n                setSeverity('error')\n                setOpenSnack(true)\n            })\n    }, [filter]);\n\n    const handleSnackClose = () => {\n        setOpenSnack(false)\n    }\n\n    return (\n        <Container>\n            <h1>Pedidos</h1>\n            <div className={styles['filter-row']}>\n                <Typography component=\"span\">Filtrar:</Typography>\n                <TextField select value={filter} onChange={event => setFilter(event.target.value)}\n                           className={styles['filter-field']}>\n                    <MenuItem value=\"created\">Não liberados</MenuItem>\n                    <MenuItem value=\"dispatched\">Liberados</MenuItem>\n                    <MenuItem value=\"all\">Todos</MenuItem>\n                </TextField>\n            </div>\n            <TableContainer component={Paper}>\n                <Table size=\"small\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Pedido</TableCell>\n                            <TableCell>Data de criação</TableCell>\n                            <TableCell>Data de entrega</TableCell>\n                            <TableCell>Status</TableCell>\n                            <TableCell>\n\n                            </TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {orders.map((order) => (\n                            <TableRow key={order.id} hover>\n                                <TableCell>{order.id}</TableCell>\n                                <TableCell>\n                                    {new Date(order.created_at).getDate()}/\n                                    {new Date(order.created_at).getMonth() + 1}/\n                                    {new Date(order.created_at).getFullYear()}\n                                </TableCell>\n                                <TableCell>\n                                    {getFormattedDate(order.due_date)}\n                                </TableCell>\n                                <TableCell>\n                                    {order.dispatched === 'created' ? \"A liberar\" : \"Liberado\"}\n                                </TableCell>\n                                <TableCell>\n                                    <Button\n                                        size=\"small\"\n                                        color=\"primary\"\n                                        variant=\"contained\"\n                                        onClick={() => history.push(`/orders/detail/${order.id}`)}\n                                    >\n                                        Abrir pedido\n                                    </Button>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                    <TableFooter>\n                        <TableRow>\n                            {/* <TablePagination\n                                rowsPerPage={rowsPerPage}\n                                rowsPerPageOptions={[]}\n                                colSpan={3}\n                                page={currentPage - 1}\n                                count={totalItems}\n                                onChangePage={handleChangePage}\n                                labelDisplayedRows={({ from, to, count }) =>\n                                    `${from}-${to} de ${\n                                        count !== -1 ? count : `more than ${to}`\n                                    }`\n                                }\n                            /> */}\n                        </TableRow>\n                    </TableFooter>\n                </Table>\n            </TableContainer>\n            <SnackAlert\n                openSnack={openSnack}\n                onClose={handleSnackClose}\n                severity={severity}\n                snackMessage={feedbackMessage}\n            />\n        </Container>\n    );\n};\n\nexport default ListOrders;\n","import React, { useEffect, useState } from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Container from \"@material-ui/core/Container\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport ErrorMessageDialog from '../../../components/ErrorMessageDialog'\nimport SnackAlert from '../../../components/SnackAlert'\nimport api from '../../../services/api'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        \"& > *\": {\n            margin: theme.spacing(1),\n            width: \"40ch\",\n        },\n    },\n    buttons: {\n        \"& > *\": {\n            margin: 5,\n        },\n        width: \"100%\",\n    },\n}));\n\nconst EditRole = () => {\n\n    const history = useHistory()\n    const { id } = useParams()\n    const classes = useStyles()\n    const [role, setRole] = useState({\n        id: 0,\n        description: ''\n    })\n    const [openSnack, setOpenSnack] = useState(false)\n    const [severity, setSeverity] = useState('')\n    const [snackMessage, setSnackMessage] = useState('')\n    const [error, setError] = useState(false)\n    const [errorMessages, setErrorMessages] = useState([])\n\n    useEffect(() => {\n        api.get(`roles/${id}`)\n            .then(response => {\n                setRole(role => setRole(response.data))\n            })\n    }, [id])\n    \n    useEffect(() => {\n        if (errorMessages.length > 0) {\n            setError(true)\n        }\n    }, [errorMessages])\n\n    const handleSubmit = event => {\n        event.preventDefault()\n        let returnFlag = false\n        if (!role.description) {\n            setErrorMessages(errorMessages => errorMessages.concat(\"O campo nome deve estar preenchido.\"));\n            returnFlag = true\n        }\n        if (returnFlag) {\n            return\n        }\n        api.put(`roles/${role.id}`, role)\n            .then(response => {\n                setSeverity('success')\n                setSnackMessage(`O Perfil \"${response.data.description}\" foi salvo com sucesso!`)\n                setOpenSnack(true)\n            })\n            .catch(error => {\n                setSeverity('error')\n                setSnackMessage('Ocorreu um erro em sua solicitação.')\n                setOpenSnack(true)\n            })\n    }\n\n    const handleCloseDialog = () => {\n        setError(false)\n        setErrorMessages([])\n    }\n\n    const handleCloseSnackBar = () => {\n        if (severity === 'success') {\n            history.goBack()\n        }\n        setOpenSnack(false)\n    }\n\n    return (\n        <Container>\n            <h1>Editar Perfil</h1>\n            <Paper>\n                <form className={classes.root} onSubmit={handleSubmit}>\n                    <TextField\n                        label=\"Nome\"\n                        value={role.description}\n                        onChange={(event) => setRole({\n                            ...role,\n                            description: event.target.value\n                        })}\n                        required\n                    />\n                    <div className={classes.buttons}>\n                        <Button\n                            onClick={(event) => handleSubmit(event)}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            style={{ marginBottom: 20 }}\n                        >\n                            Salvar\n                        </Button>\n                        <Button\n                            onClick={() => {\n                                history.goBack();\n                            }}\n                            variant=\"contained\"\n                            style={{ marginBottom: 20 }}\n                        >\n                            Voltar\n                        </Button>\n                    </div>\n                </form>\n            </Paper>\n            <ErrorMessageDialog toggle={error} handleClose={handleCloseDialog} errors={errorMessages} />\n            <SnackAlert openSnack={openSnack} onClose={handleCloseSnackBar} severity={severity} snackMessage={snackMessage} />\n        </Container>\n    );\n}\n\nexport default EditRole;","import React, {useState, useEffect} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from \"@material-ui/core/TextField\";\nimport {useHistory} from 'react-router-dom';\nimport Paper from \"@material-ui/core/Paper\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Container from '@material-ui/core/Container';\nimport api from '../../../services/api';\nimport ErrorMessageDialog from '../../../components/ErrorMessageDialog';\nimport SnackAlert from '../../../components/SnackAlert';\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        \"& > *\": {\n            margin: theme.spacing(1),\n            width: \"40ch\",\n        },\n    },\n    buttons: {\n        \"& > *\": {\n            margin: 5,\n        },\n        width: \"100%\",\n    },\n}));\n\n\nconst NewRole = () => {\n    const history = useHistory()\n    const classes = useStyles();\n    const [description, setDescription] = useState('');\n    const [error, setError] = useState(false);\n    const [errorMessages, setErrorMessages] = useState([]);\n    const [openSnack, setOpenSnack] = useState(false);\n    const [severity, setSeverity] = useState('');\n    const [snackMessage, setSnackMessage] = useState('');\n\n\n    useEffect(() => {\n        if (errorMessages.length > 0) {\n            setError(true)\n        }\n    }, [errorMessages])\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const data = {\n            description\n        };\n        let returnFlag = false\n        if (!data.description) {\n            setErrorMessages(errorMessages => errorMessages.concat(\"O campo nome deve estar preenchido.\"));\n            returnFlag = true\n        }\n        if (returnFlag) {\n            return\n        }\n        api.post('/roles', data)\n            .then(response => {\n                setSeverity('success')\n                setSnackMessage(`O Perfil \"${response.data.description}\" foi criado com sucesso!`)\n                setOpenSnack(true)\n            })\n            .catch(error => {\n                setSeverity('error')\n                setSnackMessage('Ocorreu um erro em sua solicitação.')\n                setOpenSnack(true)\n            })\n    }\n\n    const handleCloseDialog = () => {\n        setError(false)\n        setErrorMessages([])\n    }\n\n    const handleCloseSnackBar = () => {\n        if (severity === 'success') {\n            history.goBack()\n        }\n        setOpenSnack(false)\n    }\n\n    return (\n        <Container>\n            <h1>Novo Perfil</h1>\n            <Paper>\n                <form className={classes.root} onSubmit={handleSubmit}>\n                    <TextField\n                        label=\"Nome\"\n                        value={description}\n                        onChange={(event) => setDescription(event.target.value)}\n                        required\n                    />\n                </form>\n                <div className={classes.buttons}>\n                    <Button\n                        onClick={(event) => handleSubmit(event)}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        style={{marginBottom: 20}}\n                    >\n                        Salvar\n                    </Button>\n                    <Button\n                        onClick={() => {\n                            history.goBack();\n                        }}\n                        variant=\"contained\"\n                        style={{marginBottom: 20}}\n                    >\n                        Voltar\n                    </Button>\n                </div>\n            </Paper>\n            <ErrorMessageDialog toggle={error} handleClose={handleCloseDialog} errors={errorMessages}/>\n            <SnackAlert openSnack={openSnack} onClose={handleCloseSnackBar} severity={severity}\n                        snackMessage={snackMessage}/>\n        </Container>\n    );\n}\nexport default NewRole;","import React, {useEffect, useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport {useHistory} from 'react-router-dom';\nimport Container from '@material-ui/core/Container';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport SnackAlert from '../../components/SnackAlert';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport api from '../../services/api';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\n\nconst Roles = () => {\n    const history = useHistory()\n    const [roles, setRoles] = useState([])\n    const [severity, setSeverity] = useState('')\n    const [feedbackMessage, setFeedbackMessage] = useState('')\n    const [openSnack, setOpenSnack] = useState(false)\n    const [selectedRoles, setSelectedRoles] = useState(0)\n    const [openDialog, setOpenDialog] = useState(false)\n\n    const useStyles = makeStyles({\n        table: {\n            minWidth: 650,\n        },\n    });\n    const classes = useStyles();\n\n    useEffect(() => {\n        fetchRoles()\n    }, [])\n\n    const fetchRoles = () => {\n        api.get('/roles')\n            .then(response => {\n                setRoles(response.data)\n            })\n            .catch(error => {\n                setFeedbackMessage('Não foi possível acessar os perfis.')\n                setSeverity('error')\n                setOpenSnack(true)\n            })\n    }\n\n    const handleSnackClose = () => {\n        setOpenSnack(false)\n    }\n\n    const handleDialogClose = () => {\n        setOpenDialog(false)\n    }\n\n    const handleDeleteButton = id => {\n        api.delete(`roles/${id}`)\n            .then(response => {\n                fetchRoles()\n                setOpenDialog(false)\n                setFeedbackMessage('O perfil foi excluído.')\n                setSeverity('success')\n                setOpenSnack(true)\n            })\n            .catch(error => {\n                setFeedbackMessage('Não foi possível excluir o perfil.')\n                setSeverity('error')\n                setOpenSnack(true)\n            })\n    }\n    return (\n        <Container>\n            <h1>Perfis</h1>\n            <Button\n                onClick={() => {\n                    history.push('/roles/new')\n                }}\n                variant=\"contained\"\n                color=\"primary\"\n                startIcon={<AddCircleIcon/>}\n                style={{marginBottom: 20}}\n            >\n                Novo Perfil\n            </Button>\n            <TableContainer component={Paper}>\n                <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Nome</TableCell>\n                            <TableCell>Opções</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {roles.map((role) => (\n                            <TableRow key={role.id}>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {role.description}\n                                </TableCell>\n                                <TableCell>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        startIcon={<EditIcon/>}\n                                        onClick={() => {\n                                            history.push('/roles/edit/' + role.id)\n                                        }}\n                                        size=\"small\"\n                                        style={{marginRight: 5}}\n                                    >\n                                        Editar\n                                    </Button>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                        startIcon={<DeleteIcon/>}\n                                        onClick={() => {\n                                            setSelectedRoles(role.id)\n                                            setOpenDialog(true)\n                                        }}\n                                        size=\"small\"\n                                    >\n                                        Excluir\n                                    </Button>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <SnackAlert openSnack={openSnack} onClose={handleSnackClose} severity={severity}\n                        snackMessage={feedbackMessage}/>\n            <Dialog\n                open={openDialog}\n                onClose={handleDialogClose}\n            >\n                <DialogTitle>{\"Apagar Perfil?\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Deseja realmente excluir este perfil?\n                        <strong> Não é possível desfazer esta ação.</strong>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleDialogClose}>\n                        Cancelar\n                    </Button>\n                    <Button onClick={() => handleDeleteButton(selectedRoles)} color=\"secondary\">\n                        Excluir\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Container>\n    );\n}\n\nexport default Roles;\n","import React, { useEffect, useState } from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Container from \"@material-ui/core/Container\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport ErrorMessageDialog from '../../../components/ErrorMessageDialog'\nimport SnackAlert from '../../../components/SnackAlert'\nimport api from '../../../services/api'\nimport {paths} from \"../../../utils/routePaths\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        \"& > *\": {\n            margin: theme.spacing(1),\n            width: \"40ch\",\n        },\n    },\n    buttons: {\n        \"& > *\": {\n            margin: 5,\n        },\n        width: \"100%\",\n    },\n}));\n\nconst EditMenu = () => {\n\n    const history = useHistory()\n    const { id } = useParams()\n    const classes = useStyles()\n    const [menu, setMenu] = useState({\n        id: 0,\n        name: '',\n        path: ''\n    })\n    const [openSnack, setOpenSnack] = useState(false)\n    const [severity, setSeverity] = useState('')\n    const [snackMessage, setSnackMessage] = useState('')\n    const [error, setError] = useState(false)\n    const [errorMessages, setErrorMessages] = useState([])\n\n    useEffect(() => {\n        api.get(`menus/${id}`)\n            .then(response => {\n                setMenu(menu => setMenu(response.data))\n            })\n    }, [id])\n    \n    useEffect(() => {\n        if (errorMessages.length > 0) {\n            setError(true)\n        }\n    }, [errorMessages])\n\n    const handleSubmit = event => {\n        event.preventDefault()\n        let returnFlag = false\n        if (!menu.name) {\n            setErrorMessages(errorMessages => errorMessages.concat(\"O campo nome deve estar preenchido.\"));\n            returnFlag = true\n        }\n        if (!menu.path) {\n            setErrorMessages(errorMessages => errorMessages.concat(\"O campo 'Caminho' deve estar preenchido.\"));\n            returnFlag = true\n        }\n        if (returnFlag) {\n            return\n        }\n        api.put(`menus/${menu.id}`, menu)\n            .then(response => {\n                setSeverity('success')\n                setSnackMessage(`A opção \"${response.data.name}\" foi salvo com sucesso!`)\n                setOpenSnack(true)\n            })\n            .catch(error => {\n                setSeverity('error')\n                setSnackMessage('Ocorreu um erro em sua solicitação.')\n                setOpenSnack(true)\n            })\n    }\n\n    const handleCloseDialog = () => {\n        setError(false)\n        setErrorMessages([])\n    }\n\n    const handleCloseSnackBar = () => {\n        if (severity === 'success') {\n            history.goBack()\n        }\n        setOpenSnack(false)\n    }\n\n    return (\n        <Container>\n            <h1>Editar Opção Menu</h1>\n            <Paper>\n                <form className={classes.root} onSubmit={handleSubmit}>\n                    <TextField\n                        label=\"Nome\"\n                        value={menu.name}\n                        onChange={(event) => setMenu({\n                            ...menu,\n                            name: event.target.value\n                        })}\n                        required\n                    />\n                    <TextField\n                        label=\"Caminho\"\n                        value={menu.path}\n                        onChange={(event) => setMenu({\n                            ...menu,\n                            path: event.target.value\n                        })}\n                        required\n                        select\n                    >\n                        {paths.map(path => (\n                            <MenuItem key={path.path} value={path.path}>{path.path}</MenuItem>\n                        ))}\n                    </TextField>\n                    <div className={classes.buttons}>\n                        <Button\n                            onClick={(event) => handleSubmit(event)}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            style={{ marginBottom: 20 }}\n                        >\n                            Salvar\n                        </Button>\n                        <Button\n                            onClick={() => {\n                                history.goBack();\n                            }}\n                            variant=\"contained\"\n                            style={{ marginBottom: 20 }}\n                        >\n                            Voltar\n                        </Button>\n                    </div>\n                </form>\n            </Paper>\n            <ErrorMessageDialog toggle={error} handleClose={handleCloseDialog} errors={errorMessages} />\n            <SnackAlert openSnack={openSnack} onClose={handleCloseSnackBar} severity={severity} snackMessage={snackMessage} />\n        </Container>\n    );\n}\n\nexport default EditMenu;","import React, {useState, useEffect} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from \"@material-ui/core/TextField\";\nimport {useHistory} from 'react-router-dom';\nimport Paper from \"@material-ui/core/Paper\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Container from '@material-ui/core/Container';\nimport api from '../../../services/api';\nimport ErrorMessageDialog from '../../../components/ErrorMessageDialog';\nimport SnackAlert from '../../../components/SnackAlert';\nimport {paths} from '../../../utils/routePaths'\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        \"& > *\": {\n            margin: theme.spacing(1),\n            width: \"40ch\",\n        },\n    },\n    buttons: {\n        \"& > *\": {\n            margin: 5,\n        },\n        width: \"100%\",\n    },\n}));\n\nconst NewMenu = () => {\n    const history = useHistory()\n    const classes = useStyles();\n    const [name, setName] = useState('');\n    const [path, setPath] = useState('');\n    const [error, setError] = useState(false);\n    const [errorMessages, setErrorMessages] = useState([]);\n    const [openSnack, setOpenSnack] = useState(false);\n    const [severity, setSeverity] = useState('');\n    const [snackMessage, setSnackMessage] = useState('');\n\n    useEffect(() => {\n        if (errorMessages.length > 0) {\n            setError(true)\n        }\n    }, [errorMessages])\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const data = {\n            name,\n            path\n        };\n        let returnFlag = false\n        if (!data.name) {\n            setErrorMessages(errorMessages => errorMessages.concat(\"O campo nome deve estar preenchido.\"));\n            returnFlag = true\n        }\n        if (!data.path) {\n            setErrorMessages(errorMessages => errorMessages.concat(\"O campo 'Caminho' deve estar preenchido.\"));\n            returnFlag = true\n        }\n        if (returnFlag) {\n            return\n        }\n        api.post('/menus', data)\n            .then(response => {\n                setSeverity('success')\n                setSnackMessage(`O menu \"${response.data.name}\" foi criado com sucesso!`)\n                setOpenSnack(true)\n            })\n            .catch(error => {\n                setSeverity('error')\n                setSnackMessage('Ocorreu um erro em sua solicitação.')\n                setOpenSnack(true)\n            })\n    }\n\n    const handleCloseDialog = () => {\n        setError(false)\n        setErrorMessages([])\n    }\n\n    const handleCloseSnackBar = () => {\n        if (severity === 'success') {\n            history.goBack()\n        }\n        setOpenSnack(false)\n    }\n\n    return (\n        <Container>\n            <h1>Novo menu</h1>\n            <Paper>\n                <form className={classes.root} onSubmit={handleSubmit}>\n                    <TextField\n                        label=\"Nome\"\n                        value={name}\n                        onChange={(event) => setName(event.target.value)}\n                        required\n                    />\n                    <TextField\n                        label=\"Caminho\"\n                        value={path}\n                        onChange={(event) => setPath(event.target.value)}\n                        required\n                        select\n                    >\n                        {paths.map(path => (\n                            <MenuItem key={path.path} value={path.path}>{path.path}</MenuItem>\n                        ))}\n                    </TextField>\n                </form>\n                <div className={classes.buttons}>\n                    <Button\n                        onClick={(event) => handleSubmit(event)}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        style={{marginBottom: 20}}\n                    >\n                        Salvar\n                    </Button>\n                    <Button\n                        onClick={() => {\n                            history.goBack();\n                        }}\n                        variant=\"contained\"\n                        style={{marginBottom: 20}}\n                    >\n                        Voltar\n                    </Button>\n                </div>\n            </Paper>\n            <ErrorMessageDialog toggle={error} handleClose={handleCloseDialog} errors={errorMessages}/>\n            <SnackAlert openSnack={openSnack} onClose={handleCloseSnackBar} severity={severity}\n                        snackMessage={snackMessage}/>\n        </Container>\n    );\n}\nexport default NewMenu;","import React, {useEffect, useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport {useHistory} from 'react-router-dom';\nimport Container from '@material-ui/core/Container';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport SnackAlert from '../../components/SnackAlert';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport api from '../../services/api';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\n\n\nconst Menu = () => {\n    const history = useHistory()\n    const [menu, setMenu] = useState([])\n    const [severity, setSeverity] = useState('')\n    const [feedbackMessage, setFeedbackMessage] = useState('')\n    const [openSnack, setOpenSnack] = useState(false)\n    const [selectedMenu, setSelectedMenu] = useState(0)\n    const [openDialog, setOpenDialog] = useState(false)\n\n    const useStyles = makeStyles({\n        table: {\n            minWidth: 650,\n        },\n    });\n    const classes = useStyles();\n\n    useEffect(() => {\n        fetchMenus()\n    }, [])\n\n    const fetchMenus = () => {\n        api.get('/menus')\n            .then(response => {\n                setMenu(response.data)\n            })\n            .catch(error => {\n                setFeedbackMessage('Não foi possível acessar as opções do Menu.')\n                setSeverity('error')\n                setOpenSnack(true)\n            })\n    }\n    const handleSnackClose = () => {\n        setOpenSnack(false)\n    }\n\n    const handleDialogClose = () => {\n        setOpenDialog(false)\n    }\n\n    const handleDeleteButton = id => {\n        api.delete(`menus/${id}`)\n            .then(response => {\n                fetchMenus()\n                setOpenDialog(false)\n                setFeedbackMessage('A opção do Menu foi excluída.')\n                setSeverity('success')\n                setOpenSnack(true)\n            })\n            .catch(error => {\n                setFeedbackMessage('Não foi possível excluir esta opção.')\n                setSeverity('error')\n                setOpenSnack(true)\n            })\n    }\n    return (\n        <Container>\n            <h1>Menu</h1>\n            <Button\n                onClick={() => {\n                    history.push('/menus/new')\n                }}\n                variant=\"contained\"\n                color=\"primary\"\n                startIcon={<AddCircleIcon/>}\n                style={{marginBottom: 20}}\n            >\n                Novo menu\n            </Button>\n            <TableContainer component={Paper}>\n                <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Nome</TableCell>\n                            <TableCell>Caminho</TableCell>\n                            <TableCell>Opções</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {menu.map((menus) => (\n                            <TableRow key={menus.id}>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {menus.name}\n                                </TableCell>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {menus.path}\n                                </TableCell>\n                                <TableCell>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        startIcon={<EditIcon/>}\n                                        onClick={() => {\n                                            history.push('/menus/edit/' + menus.id)\n                                        }}\n                                        size=\"small\"\n                                        style={{marginRight: 5}}\n                                    >\n                                        Editar\n                                    </Button>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                        startIcon={<DeleteIcon/>}\n                                        onClick={() => {\n                                            setSelectedMenu(menus.id)\n                                            setOpenDialog(true)\n                                        }}\n                                        size=\"small\"\n                                    >\n                                        Excluir\n                                    </Button>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <SnackAlert openSnack={openSnack} onClose={handleSnackClose} severity={severity}\n                        snackMessage={feedbackMessage}/>\n            <Dialog\n                open={openDialog}\n                onClose={handleDialogClose}\n            >\n                <DialogTitle>{\"Apagar menu?\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Deseja realmente excluir este menu?\n                        <strong> Não é possível desfazer esta ação.</strong>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleDialogClose}>\n                        Cancelar\n                    </Button>\n                    <Button onClick={() => handleDeleteButton(selectedMenu)} color=\"secondary\">\n                        Excluir\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Container>\n    );\n}\n\nexport default Menu;\n","import React, {useState, useEffect} from 'react'\nimport Container from \"@material-ui/core/Container\";\nimport Box from \"@material-ui/core/Box\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport api from \"../../services/api\";\nimport styles from './styles.module.css'\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Grid from \"@material-ui/core/Grid\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst PermissionsList = ({selectedRole}) => {\n    const [menus, setMenus] = useState([])\n    const [selectedMenus, setSelectedMenus] = useState([])\n\n    useEffect(() => {\n        api.get('/menus')\n            .then(response => {\n                setMenus(response.data)\n            })\n        api.get(`/roles/${selectedRole}/menus`)\n            .then(response => {\n                setSelectedMenus(response.data.menus)\n            })\n    }, [selectedRole])\n\n    const handleChange = id => {\n        const selectedMenuIndex = selectedMenus.findIndex(menu => menu.id === id)\n        if (selectedMenuIndex < 0) {\n            const menuIndex = menus.findIndex(menu => menu.id === id)\n            setSelectedMenus([\n                ...selectedMenus,\n                menus[menuIndex]\n            ])\n        } else {\n            const newSelectedMenus = [...selectedMenus]\n            newSelectedMenus.splice(selectedMenuIndex, 1)\n            setSelectedMenus(newSelectedMenus)\n        }\n    }\n\n    const checkBoxes = (id) => {\n        const index = selectedMenus.findIndex(menu => menu.id === id)\n        return index >= 0;\n    }\n\n    const handleSaveClick = () => {\n        const data = {\n            menus: selectedMenus.map(menu => menu.id)\n        }\n        api.put(`/roles/${selectedRole}/menus`, data)\n            .then(response => {\n                console.log(`Os acessos do perfil ${response.data.description} foram salvos.`)\n            })\n    }\n\n    return (\n        <Grid item className={styles.menusGrid}>\n            <Paper>\n                <List dense component=\"div\" role=\"list\">\n                    {menus.map(menu => {\n                        const labelId = `menu-${menu.id}`\n                        const check = checkBoxes(menu.id)\n                        return (\n                            <label key={menu.id} htmlFor={labelId}>\n                                <ListItem button>\n                                    <ListItemIcon>\n                                        <Checkbox id={labelId} checked={check}\n                                                  onChange={() => handleChange(menu.id)}/>\n                                    </ListItemIcon>\n                                    <ListItemText primary={menu.name}/>\n                                </ListItem>\n                            </label>\n                        )\n                    })}\n                </List>\n            </Paper>\n            <Box mt={2}>\n                <Button variant=\"contained\" color=\"primary\" onClick={handleSaveClick}>Salvar</Button>\n            </Box>\n        </Grid>\n    )\n\n}\n\nconst Permissions = () => {\n    const [roles, setRoles] = useState([])\n    const [selectedRole, setSelectedRole] = useState('')\n    const [openDialog, setOpenDialog] = useState(false)\n    const [dialogText, setDialogText] = useState('')\n    const [continuing, setContinuing] = useState(false)\n\n    useEffect(() => {\n        api.get('/roles')\n            .then(response => {\n                setRoles(response.data)\n            })\n            .catch(error => {\n                console.log(error.response.data)\n            })\n    }, [])\n\n    const handleSubmit = event => {\n        event.preventDefault()\n        if (selectedRole === '') {\n            setDialogText('Você deve selecionar um perfil antes de continuar.')\n            setOpenDialog(true)\n        } else {\n            setContinuing(true)\n        }\n    }\n\n    const handleDialogClose = () => {\n        setOpenDialog(false)\n    }\n\n    return (\n        <Container>\n            <h1>Acessos</h1>\n            <form onSubmit={handleSubmit}>\n                <Grid container>\n                    <Grid>\n                        <Box>\n                            <TextField\n                                label=\"Perfil\"\n                                value={selectedRole}\n                                onChange={event => setSelectedRole(event.target.value)}\n                                select\n                                required\n                                className={styles.select}\n                                helperText=\"Selecione um perfil para continuar\"\n                            >\n                                {roles.map(role => (\n                                    <MenuItem key={role.id} value={role.id}>{role.description}</MenuItem>\n                                ))}\n                            </TextField>\n                        </Box>\n                        <Box mt={2}>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                type=\"submit\"\n                            >Continuar</Button>\n                        </Box>\n                    </Grid>\n                    {continuing ? (\n                        <Grid>\n                            <Box ml={3}>\n                                <PermissionsList selectedRole={selectedRole}/>\n                            </Box>\n                        </Grid>\n                    ) : null}\n                </Grid>\n            </form>\n            <Dialog onClose={handleDialogClose} open={openDialog}>\n                <DialogContent>\n                    <DialogContentText>{dialogText}</DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button variant=\"contained\" color=\"primary\" onClick={handleDialogClose}>Fechar</Button>\n                </DialogActions>\n            </Dialog>\n        </Container>\n    )\n}\n\nexport default Permissions","import React, {useEffect, useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport {useHistory} from 'react-router-dom';\nimport Container from '@material-ui/core/Container';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport SnackAlert from '../../../components/SnackAlert';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport api from '../../../services/api';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\n\n\nconst ListLabs = () => {\n    const history = useHistory()\n    const [labs, setLabs] = useState([])\n    const [severity, setSeverity] = useState('')\n    const [feedbackMessage, setFeedbackMessage] = useState('')\n    const [openSnack, setOpenSnack] = useState(false)\n    const [selectedLab, setSelectedLab] = useState(0)\n    const [openDialog, setOpenDialog] = useState(false)\n\n    useEffect(() => {\n        fetchLabs()\n    }, [])\n\n    const fetchLabs = () => {\n        api.get('/labs')\n            .then(response => {\n                setLabs(response.data)\n            })\n            .catch(error => {\n                setFeedbackMessage('Houve um erro em sua solicitação.')\n                setSeverity('error')\n                setOpenSnack(true)\n            })\n    }\n    const handleSnackClose = () => {\n        setOpenSnack(false)\n    }\n\n    const handleDialogClose = () => {\n        setOpenDialog(false)\n    }\n\n    const handleDeleteButton = id => {\n        api.delete(`labs/${id}`)\n            .then(response => {\n                fetchLabs()\n                setOpenDialog(false)\n                setFeedbackMessage('O laboratório foi excluído.')\n                setSeverity('success')\n                setOpenSnack(true)\n            })\n            .catch(error => {\n                setFeedbackMessage('Não foi possível excluir o laboratório.')\n                setSeverity('error')\n                setOpenSnack(true)\n            })\n    }\n\n    return (\n        <Container>\n            <h1>Laboratórios</h1>\n            <Button\n                onClick={() => {\n                    history.push('/labs/new')\n                }}\n                variant=\"contained\"\n                color=\"primary\"\n                startIcon={<AddCircleIcon/>}\n                style={{marginBottom: 20}}\n            >\n                Novo laboratório\n            </Button>\n            <TableContainer component={Paper}>\n                <Table size=\"small\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Descrição</TableCell>\n                            <TableCell>Comentário</TableCell>\n                            <TableCell>Opções</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {labs.map((lab) => (\n                            <TableRow key={lab.id}>\n                                <TableCell>\n                                    {lab.description}\n                                </TableCell>\n                                <TableCell>\n                                    {lab.comment}\n                                </TableCell>\n                                <TableCell>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        startIcon={<EditIcon/>}\n                                        onClick={() => {\n                                            history.push('/labs/edit/' + lab.id)\n                                        }}\n                                        size=\"small\"\n                                        style={{marginRight: 5}}\n                                    >\n                                        Editar\n                                    </Button>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                        startIcon={<DeleteIcon/>}\n                                        onClick={() => {\n                                            setSelectedLab(lab.id)\n                                            setOpenDialog(true)\n                                        }}\n                                        size=\"small\"\n                                    >\n                                        Excluir\n                                    </Button>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <SnackAlert openSnack={openSnack} onClose={handleSnackClose} severity={severity}\n                        snackMessage={feedbackMessage}/>\n            <Dialog\n                open={openDialog}\n                onClose={handleDialogClose}\n            >\n                <DialogTitle>{\"Apagar laboratório?\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Deseja realmente excluir este laboratório?\n                        <strong> Não é possível desfazer esta ação.</strong>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleDialogClose}>\n                        Cancelar\n                    </Button>\n                    <Button onClick={() => handleDeleteButton(selectedLab)} color=\"secondary\">\n                        Excluir\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Container>\n    );\n}\n\nexport default ListLabs;\n","import React, {useState, useEffect} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from \"@material-ui/core/TextField\";\nimport {useHistory} from 'react-router-dom';\nimport Paper from \"@material-ui/core/Paper\";\nimport Container from '@material-ui/core/Container';\nimport api from '../../../services/api';\nimport ErrorMessageDialog from '../../../components/ErrorMessageDialog';\nimport SnackAlert from '../../../components/SnackAlert';\nimport {Box} from \"@material-ui/core\";\nimport styles from './styles.module.css'\n\nconst NewLab = () => {\n\n    const history = useHistory()\n    const [description, setDescription] = useState('');\n    const [comment, setComment] = useState('');\n    const [error, setError] = useState(false);\n    const [errorMessages, setErrorMessages] = useState([]);\n    const [openSnack, setOpenSnack] = useState(false);\n    const [severity, setSeverity] = useState('');\n    const [snackMessage, setSnackMessage] = useState('');\n\n    useEffect(() => {\n        if (errorMessages.length > 0) {\n            setError(true)\n        }\n    }, [errorMessages])\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const data = {\n            description,\n            comment\n        };\n        let returnFlag = false\n        if (!data.description) {\n            setErrorMessages(errorMessages => errorMessages.concat(\"O campo descrição deve estar preenchido.\"));\n            returnFlag = true\n        }\n        if (returnFlag) {\n            return\n        }\n        api.post('/labs', data)\n            .then(response => {\n                setSeverity('success')\n                setSnackMessage(`O laboratório \"${response.data.description}\" foi criado com sucesso!`)\n                setOpenSnack(true)\n            })\n            .catch(error => {\n                setSeverity('error')\n                setSnackMessage('Ocorreu um erro em sua solicitação.')\n                setOpenSnack(true)\n            })\n    }\n\n    const handleCloseDialog = () => {\n        setError(false)\n        setErrorMessages([])\n    }\n\n    const handleCloseSnackBar = () => {\n        if (severity === 'success') {\n            history.goBack()\n        }\n        setOpenSnack(false)\n    }\n\n    return (\n        <Container>\n            <h1>Novo laboratório</h1>\n            <Paper>\n                <Box p={2}>\n                    <form onSubmit={handleSubmit}>\n                        <Box mr={1} component=\"span\">\n                            <TextField\n                                label=\"Descrição\"\n                                value={description}\n                                onChange={(event) => setDescription(event.target.value)}\n                                required\n                            />\n                        </Box>\n                        <Box mr={1} component=\"span\">\n                            <TextField\n                                label=\"Comentário\"\n                                value={comment}\n                                onChange={(event) => setComment(event.target.value)}\n                                className={styles.formField}\n                            />\n                        </Box>\n                        <Box mt={2}>\n                            <Box mr={1} component=\"span\">\n                                <Button\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    style={{marginBottom: 20}}\n                                >\n                                    Salvar\n                                </Button>\n                            </Box>\n                            <Box component=\"span\">\n                                <Button\n                                    onClick={() => {\n                                        history.goBack();\n                                    }}\n                                    variant=\"contained\"\n                                    style={{marginBottom: 20}}\n                                >\n                                    Voltar\n                                </Button>\n                            </Box>\n                        </Box>\n                    </form>\n                </Box>\n            </Paper>\n            <ErrorMessageDialog toggle={error} handleClose={handleCloseDialog} errors={errorMessages}/>\n            <SnackAlert openSnack={openSnack} onClose={handleCloseSnackBar} severity={severity}\n                        snackMessage={snackMessage}/>\n        </Container>\n    );\n}\nexport default NewLab;","import React, {useState, useEffect} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from \"@material-ui/core/TextField\";\nimport {useHistory, useParams} from 'react-router-dom';\nimport Paper from \"@material-ui/core/Paper\";\nimport Container from '@material-ui/core/Container';\nimport api from '../../../services/api';\nimport ErrorMessageDialog from '../../../components/ErrorMessageDialog';\nimport SnackAlert from '../../../components/SnackAlert';\nimport {Box} from \"@material-ui/core\";\nimport styles from './styles.module.css'\n\nconst EditLab = () => {\n\n    const history = useHistory()\n    const {labId} = useParams()\n    const [lab, setLab] = useState({id: labId, description: '', comment: ''});\n    const [error, setError] = useState(false);\n    const [errorMessages, setErrorMessages] = useState([]);\n    const [openSnack, setOpenSnack] = useState(false);\n    const [severity, setSeverity] = useState('');\n    const [snackMessage, setSnackMessage] = useState('');\n\n    useEffect(() => {\n        api.get(`/labs/${labId}`)\n            .then(response => {\n                setLab(response.data)\n            })\n            .catch(error => {\n                setSnackMessage('Houve um erro em sua solicitação.')\n                setSeverity('error')\n                setOpenSnack(true)\n            })\n    }, [labId])\n\n    useEffect(() => {\n        if (errorMessages.length > 0) {\n            setError(true)\n        }\n    }, [errorMessages])\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const data = {\n            description: lab.description,\n            comment: lab.comment\n        };\n        let returnFlag = false\n        if (!data.description) {\n            setErrorMessages(errorMessages => errorMessages.concat(\"O campo descrição deve estar preenchido.\"));\n            returnFlag = true\n        }\n        if (returnFlag) {\n            return\n        }\n        api.put(`/labs/${labId}`, data)\n            .then(response => {\n                setSeverity('success')\n                setSnackMessage(`O laboratório \"${response.data.description}\" foi alterado com sucesso!`)\n                setOpenSnack(true)\n            })\n            .catch(error => {\n                setSeverity('error')\n                setSnackMessage('Ocorreu um erro em sua solicitação.')\n                setOpenSnack(true)\n            })\n    }\n\n    const handleCloseDialog = () => {\n        setError(false)\n        setErrorMessages([])\n    }\n\n    const handleCloseSnackBar = () => {\n        if (severity === 'success') {\n            history.goBack()\n        }\n        setOpenSnack(false)\n    }\n\n    return (\n        <Container>\n            <h1>Editar laboratório</h1>\n            <Paper>\n                <Box p={2}>\n                    <form onSubmit={handleSubmit}>\n                        <Box mr={1} component=\"span\">\n                            <TextField\n                                label=\"Descrição\"\n                                value={lab.description}\n                                onChange={(event) => setLab({\n                                    ...lab,\n                                    description: event.target.value\n                                })}\n                                required\n                            />\n                        </Box>\n                        <Box mr={1} component=\"span\">\n                            <TextField\n                                label=\"Comentário\"\n                                value={lab.comment}\n                                onChange={(event) => setLab({\n                                    ...lab,\n                                    comment: event.target.value\n                                })}\n                                className={styles.formField}\n                            />\n                        </Box>\n                        <Box mt={2}>\n                            <Box mr={1} component=\"span\">\n                                <Button\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    style={{marginBottom: 20}}\n                                >\n                                    Salvar\n                                </Button>\n                            </Box>\n                            <Box component=\"span\">\n                                <Button\n                                    onClick={() => {\n                                        history.goBack();\n                                    }}\n                                    variant=\"contained\"\n                                    style={{marginBottom: 20}}\n                                >\n                                    Voltar\n                                </Button>\n                            </Box>\n                        </Box>\n                    </form>\n                </Box>\n            </Paper>\n            <ErrorMessageDialog toggle={error} handleClose={handleCloseDialog} errors={errorMessages}/>\n            <SnackAlert openSnack={openSnack} onClose={handleCloseSnackBar} severity={severity}\n                        snackMessage={snackMessage}/>\n        </Container>\n    );\n}\nexport default EditLab;","import React, {useEffect, useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport {useHistory} from 'react-router-dom';\nimport Container from '@material-ui/core/Container';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport SnackAlert from '../../../components/SnackAlert';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport api from '../../../services/api';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\n\n\nconst ListCourses = () => {\n    const history = useHistory()\n    const [courses, setCourses] = useState([])\n    const [severity, setSeverity] = useState('')\n    const [feedbackMessage, setFeedbackMessage] = useState('')\n    const [openSnack, setOpenSnack] = useState(false)\n    const [selectedCourse, setSelectedCourse] = useState(0)\n    const [openDialog, setOpenDialog] = useState(false)\n\n    useEffect(() => {\n        fetchCourses()\n    }, [])\n\n    const fetchCourses = () => {\n        api.get('/courses')\n            .then(response => {\n                setCourses(response.data)\n            })\n            .catch(error => {\n                setFeedbackMessage('Houve um erro em sua solicitação.')\n                setSeverity('error')\n                setOpenSnack(true)\n            })\n    }\n    const handleSnackClose = () => {\n        setOpenSnack(false)\n    }\n\n    const handleDialogClose = () => {\n        setOpenDialog(false)\n    }\n\n    const handleDeleteButton = id => {\n        api.delete(`courses/${id}`)\n            .then(response => {\n                fetchCourses()\n                setOpenDialog(false)\n                setFeedbackMessage('O curso foi excluído.')\n                setSeverity('success')\n                setOpenSnack(true)\n            })\n            .catch(error => {\n                setFeedbackMessage('Não foi possível excluir o curso.')\n                setSeverity('error')\n                setOpenSnack(true)\n            })\n    }\n\n    return (\n        <Container>\n            <h1>Cursos</h1>\n            <Button\n                onClick={() => {\n                    history.push('/courses/new')\n                }}\n                variant=\"contained\"\n                color=\"primary\"\n                startIcon={<AddCircleIcon/>}\n                style={{marginBottom: 20}}\n            >\n                Novo curso\n            </Button>\n            <TableContainer component={Paper}>\n                <Table size=\"small\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Descrição</TableCell>\n                            <TableCell>Opções</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {courses.map((course) => (\n                            <TableRow key={course.id}>\n                                <TableCell>\n                                    {course.description}\n                                </TableCell>\n                                <TableCell>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        startIcon={<EditIcon/>}\n                                        onClick={() => {\n                                            history.push('/courses/edit/' + course.id)\n                                        }}\n                                        size=\"small\"\n                                        style={{marginRight: 5}}\n                                    >\n                                        Editar\n                                    </Button>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                        startIcon={<DeleteIcon/>}\n                                        onClick={() => {\n                                            setSelectedCourse(course.id)\n                                            setOpenDialog(true)\n                                        }}\n                                        size=\"small\"\n                                    >\n                                        Excluir\n                                    </Button>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <SnackAlert openSnack={openSnack} onClose={handleSnackClose} severity={severity}\n                        snackMessage={feedbackMessage}/>\n            <Dialog\n                open={openDialog}\n                onClose={handleDialogClose}\n            >\n                <DialogTitle>{\"Apagar curso?\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Deseja realmente excluir este curso?\n                        <strong> Não é possível desfazer esta ação.</strong>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleDialogClose}>\n                        Cancelar\n                    </Button>\n                    <Button onClick={() => handleDeleteButton(selectedCourse)} color=\"secondary\">\n                        Excluir\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Container>\n    );\n}\n\nexport default ListCourses;\n","import React, {useState, useEffect} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from \"@material-ui/core/TextField\";\nimport {useHistory} from 'react-router-dom';\nimport Paper from \"@material-ui/core/Paper\";\nimport Container from '@material-ui/core/Container';\nimport api from '../../../services/api';\nimport ErrorMessageDialog from '../../../components/ErrorMessageDialog';\nimport SnackAlert from '../../../components/SnackAlert';\nimport {Box} from \"@material-ui/core\";\nimport styles from './styles.module.css'\n\nconst NewCourse = () => {\n\n    const history = useHistory()\n    const [description, setDescription] = useState('');\n    const [error, setError] = useState(false);\n    const [errorMessages, setErrorMessages] = useState([]);\n    const [openSnack, setOpenSnack] = useState(false);\n    const [severity, setSeverity] = useState('');\n    const [snackMessage, setSnackMessage] = useState('');\n\n    useEffect(() => {\n        if (errorMessages.length > 0) {\n            setError(true)\n        }\n    }, [errorMessages])\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const data = {\n            description,\n        };\n        let returnFlag = false\n        if (!data.description) {\n            setErrorMessages(errorMessages => errorMessages.concat(\"O campo descrição deve estar preenchido.\"));\n            returnFlag = true\n        }\n        if (returnFlag) {\n            return\n        }\n        api.post('/courses', data)\n            .then(response => {\n                setSeverity('success')\n                setSnackMessage(`O curso \"${response.data.description}\" foi criado com sucesso!`)\n                setOpenSnack(true)\n            })\n            .catch(error => {\n                setSeverity('error')\n                setSnackMessage('Ocorreu um erro em sua solicitação.')\n                setOpenSnack(true)\n            })\n    }\n\n    const handleCloseDialog = () => {\n        setError(false)\n        setErrorMessages([])\n    }\n\n    const handleCloseSnackBar = () => {\n        if (severity === 'success') {\n            history.goBack()\n        }\n        setOpenSnack(false)\n    }\n\n    return (\n        <Container>\n            <h1>Novo curso</h1>\n            <Paper>\n                <Box p={2}>\n                    <form onSubmit={handleSubmit}>\n                        <Box mr={1} component=\"span\">\n                            <TextField\n                                label=\"Descrição\"\n                                value={description}\n                                onChange={(event) => setDescription(event.target.value)}\n                                required\n                                className={styles.formField}\n                            />\n                        </Box>\n                        <Box mt={2}>\n                            <Box mr={1} component=\"span\">\n                                <Button\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                >\n                                    Salvar\n                                </Button>\n                            </Box>\n                            <Box component=\"span\">\n                                <Button\n                                    onClick={() => {\n                                        history.goBack();\n                                    }}\n                                    variant=\"contained\"\n                                >\n                                    Voltar\n                                </Button>\n                            </Box>\n                        </Box>\n                    </form>\n                </Box>\n            </Paper>\n            <ErrorMessageDialog toggle={error} handleClose={handleCloseDialog} errors={errorMessages}/>\n            <SnackAlert openSnack={openSnack} onClose={handleCloseSnackBar} severity={severity}\n                        snackMessage={snackMessage}/>\n        </Container>\n    );\n}\nexport default NewCourse;","import React, {useState, useEffect} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from \"@material-ui/core/TextField\";\nimport {useHistory, useParams} from 'react-router-dom';\nimport Paper from \"@material-ui/core/Paper\";\nimport Container from '@material-ui/core/Container';\nimport api from '../../../services/api';\nimport ErrorMessageDialog from '../../../components/ErrorMessageDialog';\nimport SnackAlert from '../../../components/SnackAlert';\nimport {Box} from \"@material-ui/core\";\nimport styles from './styles.module.css'\n\nconst EditCourse = () => {\n\n    const history = useHistory()\n    const {courseId} = useParams()\n    const [course, setCourse] = useState({id: courseId, description: ''});\n    const [error, setError] = useState(false);\n    const [errorMessages, setErrorMessages] = useState([]);\n    const [openSnack, setOpenSnack] = useState(false);\n    const [severity, setSeverity] = useState('');\n    const [snackMessage, setSnackMessage] = useState('');\n\n    useEffect(() => {\n        api.get(`/courses/${courseId}`)\n            .then(response => {\n                setCourse(response.data)\n            })\n            .catch(error => {\n                setSnackMessage('Houve um erro em sua solicitação.')\n                setSeverity('error')\n                setOpenSnack(true)\n            })\n    }, [courseId])\n\n    useEffect(() => {\n        if (errorMessages.length > 0) {\n            setError(true)\n        }\n    }, [errorMessages])\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const data = {\n            description: course.description,\n        };\n        let returnFlag = false\n        if (!data.description) {\n            setErrorMessages(errorMessages => errorMessages.concat(\"O campo descrição deve estar preenchido.\"));\n            returnFlag = true\n        }\n        if (returnFlag) {\n            return\n        }\n        api.put(`/courses/${courseId}`, data)\n            .then(response => {\n                setSeverity('success')\n                setSnackMessage(`O curso \"${response.data.description}\" foi alterado com sucesso!`)\n                setOpenSnack(true)\n            })\n            .catch(error => {\n                setSeverity('error')\n                setSnackMessage('Ocorreu um erro em sua solicitação.')\n                setOpenSnack(true)\n            })\n    }\n\n    const handleCloseDialog = () => {\n        setError(false)\n        setErrorMessages([])\n    }\n\n    const handleCloseSnackBar = () => {\n        if (severity === 'success') {\n            history.goBack()\n        }\n        setOpenSnack(false)\n    }\n\n    return (\n        <Container>\n            <h1>Editar curso</h1>\n            <Paper>\n                <Box p={2}>\n                    <form onSubmit={handleSubmit}>\n                        <Box mr={1} component=\"span\">\n                            <TextField\n                                label=\"Descrição\"\n                                value={course.description}\n                                onChange={(event) => setCourse({\n                                    ...course,\n                                    description: event.target.value\n                                })}\n                                required\n                                className={styles.formField}\n                            />\n                        </Box>\n                        <Box mt={2}>\n                            <Box mr={1} component=\"span\">\n                                <Button\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                >\n                                    Salvar\n                                </Button>\n                            </Box>\n                            <Box component=\"span\">\n                                <Button\n                                    onClick={() => {\n                                        history.goBack();\n                                    }}\n                                    variant=\"contained\"\n                                >\n                                    Voltar\n                                </Button>\n                            </Box>\n                        </Box>\n                    </form>\n                </Box>\n            </Paper>\n            <ErrorMessageDialog toggle={error} handleClose={handleCloseDialog} errors={errorMessages}/>\n            <SnackAlert openSnack={openSnack} onClose={handleCloseSnackBar} severity={severity}\n                        snackMessage={snackMessage}/>\n        </Container>\n    );\n}\nexport default EditCourse;","import React from \"react\";\nimport Home from \"../pages/Home\";\nimport EditItem from \"../pages/Items/EditItem\";\nimport Lots from \"../pages/Lots/ListLots\";\nimport NewItem from \"../pages/Items/NewItem\";\nimport Items from \"../pages/Items\";\nimport NewLot from \"../pages/Lots/NewLot\";\nimport EditLot from \"../pages/Lots/EditLot\";\nimport MyOrders from \"../pages/Orders/MyOrders\";\nimport NewUser from \"../pages/Users/NewUser\";\nimport EditUser from \"../pages/Users/EditUser\";\nimport RedefinePass from \"../pages/Users/RedefinePass\";\nimport Users from \"../pages/Users\";\nimport DispatchOrder from \"../pages/Orders/DispatchOrder\";\nimport OrderDetail from \"../pages/Orders/OrderDetail\";\nimport NewOrder from \"../pages/Orders/NewOrder\";\nimport ListOrders from \"../pages/Orders/ListOrders\";\nimport EditRole from \"../pages/Roles/EditRole\";\nimport NewRole from \"../pages/Roles/NewRole\";\nimport Roles from \"../pages/Roles\";\nimport EditMenu from \"../pages/Menu/EditMenu\";\nimport NewMenu from \"../pages/Menu/NewMenu\";\nimport Menu from \"../pages/Menu\";\nimport Permissions from \"../pages/Permissions\";\nimport ListLabs from \"../pages/Labs/ListLabs\";\nimport NewLab from \"../pages/Labs/NewLab\";\nimport EditLab from \"../pages/Labs/EditLab\";\nimport ListCourses from \"../pages/Courses/ListCourses\";\nimport NewCourse from \"../pages/Courses/NewCourse\";\nimport EditCourse from \"../pages/Courses/EditCourse\";\n\nexport const paths = [\n    {path: '/', exact: true, component: <Home />},\n    {path: '/items/edit/:id', exact: false, component: <EditItem />},\n    {path: '/items/:itemId/lots', exact: false, component: <Lots />},\n    {path: '/items/new', exact: false, component: <NewItem />},\n    {path: '/items', exact: false, component: <Items />},\n    {path: '/lots/new', exact: false, component: <NewLot />},\n    {path: '/lots/edit/:lotId', exact: false, component: <EditLot />},\n    {path: '/users/myorders', exact: false, component: <MyOrders />},\n    {path: '/users/new', exact: false, component: <NewUser />},\n    {path: '/users/edit/:id', exact: false, component: <EditUser />},\n    {path: '/users/:id/redefine', exact: false, component: <RedefinePass />},\n    {path: '/users', exact: false, component: <Users />},\n    {path: '/orders/:orderId/items/lots', exact: false, component: <DispatchOrder />},\n    {path: '/orders/detail/:id', exact: false, component: <OrderDetail />},\n    {path: '/orders/myorders', exact: false, component: <MyOrders />},\n    {path: '/orders/new', exact: false, component: <NewOrder />},\n    {path: '/orders', exact: false, component: <ListOrders />},\n    {path: '/roles/edit/:id', exact: false, component: <EditRole />},\n    {path: '/roles/new', exact: false, component: <NewRole />},\n    {path: '/roles', exact: false, component: <Roles />},\n    {path: '/menus/edit/:id', exact: false, component: <EditMenu />},\n    {path: '/menus/new', exact: false, component: <NewMenu />},\n    {path: '/menus', exact: false, component: <Menu />},\n    {path: '/permissions', exact: false, component: <Permissions />},\n    {path: '/labs/edit/:labId', exact: false, component: <EditLab />},\n    {path: '/labs/new', exact: false, component: <NewLab />},\n    {path: '/labs', exact: false, component: <ListLabs />},\n    {path: '/courses/edit/:courseId', exact: false, component: <EditCourse />},\n    {path: '/courses/new', exact: false, component: <NewCourse />},\n    {path: '/courses', exact: false, component: <ListCourses />},\n]","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport {paths} from './utils/routePaths'\n\nconst Routes = () => {\n    return (\n        <Switch>\n            {paths.map(path => (\n                <Route key={path.path} path={path.path} exact={path.exact}>\n                    {path.component}\n                </Route>\n            ))}\n            <Route>\n                <h1>Página não encontrada</h1>\n            </Route>\n        </Switch>\n    )\n}\n\nexport default Routes","import React from 'react';\nimport clsx from 'clsx';\nimport {makeStyles} from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport MainListItems from './MainListItems';\nimport Routes from '../../routes'\nimport logo from '../../images/logo.png'\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    toolbar: {\n        paddingRight: 24, // keep right padding when drawer closed\n    },\n    toolbarIcon: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: '0 8px',\n        ...theme.mixins.toolbar,\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        marginLeft: drawerWidth,\n        width: `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['width', 'margin'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    menuButton: {\n        marginRight: 36,\n    },\n    menuButtonHidden: {\n        display: 'none',\n    },\n    title: {\n        flexGrow: 1,\n    },\n    drawerPaper: {\n        position: 'relative',\n        whiteSpace: 'nowrap',\n        width: drawerWidth,\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    drawerPaperClose: {\n        overflowX: 'hidden',\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        width: theme.spacing(7),\n        [theme.breakpoints.up('sm')]: {\n            width: theme.spacing(9),\n        },\n    },\n    appBarSpacer: theme.mixins.toolbar,\n    content: {\n        flexGrow: 1,\n        height: '100vh',\n        overflow: 'auto',\n    },\n    container: {\n        paddingTop: theme.spacing(4),\n        paddingBottom: theme.spacing(4),\n    },\n    paper: {\n        padding: theme.spacing(2),\n        display: 'flex',\n        overflow: 'auto',\n        flexDirection: 'column',\n    },\n    fixedHeight: {\n        height: 240,\n    },\n}));\n\nexport default function Dashboard({logout}) {\n\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(true);\n    const handleDrawerOpen = () => {\n        setOpen(true);\n    };\n    const handleDrawerClose = () => {\n        setOpen(false);\n    };\n    // const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline/>\n            <AppBar\n                position=\"absolute\"\n                className={clsx(classes.appBar, open && classes.appBarShift)}\n            >\n                <Toolbar className={classes.toolbar}>\n                    <IconButton\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        onClick={handleDrawerOpen}\n                        className={clsx(\n                            classes.menuButton,\n                            open && classes.menuButtonHidden,\n                        )}\n                    >\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography\n                        component=\"h1\"\n                        variant=\"h6\"\n                        color=\"inherit\"\n                        noWrap\n                        className={classes.title}\n                    >\n                        <img src={logo} width={30} alt=\"Centro Universitário\" />\n                        <span style={{ marginLeft: 10 }}>Unieuro</span>\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n\n            <Drawer\n                variant=\"permanent\"\n                classes={{\n                    paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n                }}\n                open={open}\n            >\n                <div className={classes.toolbarIcon}>\n                    <IconButton onClick={handleDrawerClose}>\n                        <ChevronLeftIcon/>\n                    </IconButton>\n                </div>\n                <Divider/>\n\n                <List>\n                    <MainListItems logout={logout} />\n                </List>\n            </Drawer>\n\n            <main className={classes.content}>\n                <div className={classes.appBarSpacer}/>\n                <Container maxWidth=\"lg\" className={classes.container}>\n                    <Grid container spacing={3}>\n                        <Routes/>\n                    </Grid>\n                </Container>\n            </main>\n        </div>\n    );\n}\n","import React, {useState} from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport api from '../../services/api'\nimport SnackAlert from \"../../components/SnackAlert\";\nimport {useHistory} from 'react-router-dom'\n\nconst Login = ({login}) => {\n\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [errorMessage, setErrorMessage] = useState('')\n\n    const [openSnack, setOpenSnack] = useState(false)\n    const history = useHistory()\n\n    const handleCloseSnackbar = () => {\n        setOpenSnack(false)\n    }\n\n    const handleSubmit = event => {\n        event.preventDefault()\n        const data = {\n            email,\n            password\n        }\n        api.get('csrf-cookie')\n            .then(response => {\n                api.post('login', data)\n                    .then(response => {\n                        if (!response.data.error) {\n                            login(response.data)\n                            history.push('/')\n                        }\n                    })\n                    .catch(error => {\n                        setErrorMessage(error.response.data)\n                        setOpenSnack(true)\n                    })\n            }).catch(error => {\n            setErrorMessage(error.response.data)\n            setOpenSnack(true)\n        })\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <CssBaseline/>\n            <div style={{width: '100%', display: 'flex', flexDirection: 'column', alignItems: 'center'}}>\n                <h1>Gestão de materiais</h1>\n                <p style={{width: '25%'}}>Para acessar o sistema, informe seu email e senha.</p>\n                <div style={{width: '25%'}}>\n                    <div>\n                        <TextField label=\"E-mail\" type=\"email\" value={email}\n                                   onChange={event => setEmail(event.target.value)}\n                                   style={{width: '100%'}}\n                                   required\n                                   inputProps={{\n                                       autoComplete: 'username'\n                                   }}\n                        />\n                    </div>\n                    <div style={{marginTop: 10}}>\n                        <TextField label=\"Senha\" type=\"password\" value={password}\n                                   onChange={event => setPassword(event.target.value)}\n                                   style={{width: '100%'}}\n                                   inputProps={{\n                                       autoComplete: 'current-password'\n                                   }}\n                                   required\n                        />\n                    </div>\n                    <div style={{marginTop: 20, width: '100%'}}>\n                        <Button variant=\"contained\" color=\"primary\" type=\"submit\"\n                                style={{width: '100%'}}>Entrar</Button>\n                    </div>\n                    <SnackAlert openSnack={openSnack} onClose={handleCloseSnackbar} severity=\"error\"\n                                snackMessage={errorMessage.error}/>\n                </div>\n            </div>\n        </form>\n    )\n}\n\nexport default Login","import React, {useState} from 'react';\nimport Dashboard from './pages/dashboard/Dashboard'\nimport {BrowserRouter} from 'react-router-dom'\nimport Login from './pages/Login'\nimport api from './services/api'\n\nfunction App() {\n\n    const [loggedIn, setLoggedIn] = useState(sessionStorage.getItem('loggedIn') === 'true' || false)\n\n    const login = (responseData) => {\n        sessionStorage.setItem('loggedIn', true)\n        sessionStorage.setItem('userId', responseData.id)\n        sessionStorage.setItem('roleId', responseData.role_id)\n        setLoggedIn(true)\n    }\n\n    const logout = () => {\n        api.get('/logout')\n            .then(response => {\n                if (response.status === 204) {\n                    setLoggedIn(false)\n                    sessionStorage.clear()\n                }\n            })\n    }\n\n    return (\n        <BrowserRouter>\n            {loggedIn ? <Dashboard logout={logout} /> : <Login login={login} />}\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'fontsource-roboto'\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}